<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="964" version="1.2" xmlns="http://www.w3.org/2000/svg" height="600" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext">
 <defs/>
 <metadata>
  <atv:gridconfig width="5" enabled="true" height="5" gridstyle="lines"/>
  <atv:snapconfig width="5" enabled="true" height="5"/>
 </metadata>
 <script type="text/ecmascript" xlink:href="/q/TableFunctions.js"/>
 <script type="text/ecmascript" xlink:href="/q/StdConstantsFunctions.js"/>
 <script type="text/ecmascript"><![CDATA[var $ = top.$;
var enviroHeaders = [];
var	RowHeight = 30,
	linefill = "#FFFFFF",
	columnfill = "#FFFFFF"; //EEF1F2

getRowFunction = function(col, table){

	return function(dp) {

		var curData = table.dataProvider().source.data;
		for (var i=0; i<curData.length; i++) {	
			if(curData[i][col].dp == dp) {
//				console.log("Updating row ", i, " for dp ", dp);
				return i +1;
			}
		};
	}
}

// setup blank tables
//console.log("Setting up tables...");
var enviroTable = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Table", { "gElement": document.getElementById("commands"),"sortedByColumn":0, "autoResize":true, "height":600, "width":900});
enviroTable.setConfiguration({rowHeight:RowHeight, sortingUp:false, drawStatusBar:false});
enviroHeaders.push({name: "Component ", width: 400, fontSize: fontSize});
enviroHeaders.push({name: "Type", width: 200, fontSize: fontSize});
enviroHeaders.push({name: "Value", width: 180, fontSize: fontSize});
enviroHeaders.push({name: "Unit", width: 110, fontSize: fontSize});
enviroTable.setHeaders(enviroHeaders);


function initializeEnviroTable(valueList, table){

	//initialize table
	var nodearray = [];
	for (var i=0; i<valueList.length; i++) {	
//		console.log("=====================================Looking at : ", valueList[i]);
		var datarow = [];
	
		datarow[0] = {text: valueList[i].ComponentName, fill:linefill, fontSize: fontcolumn};
		datarow[1] = {text: valueList[i].ComponentType, fill:linefill, fontSize: fontcolumn};
		datarow[2] = {text: "...", fill:linefill, dp:valueList[i].DP};
		datarow[3] = {text: valueList[i].Unit, fill:linefill, fontSize: fontcolumn};
		nodearray[i] = datarow;	
	}
	table.setDataProvider({data: nodearray});

	//Set Update Function
	for (var i=0; i<valueList.length; i++) {
		addSubscribe(3, getRowFunction(2, table), valueList[i].DP, valueList[i].Type, table);
	}
}


var enviroModule = "/QC_DELTA/";

var EnviroMonitoringValues =[

{ComponentName: "System Running", DP: enviroModule +".DeltaTherm_CoolingValues.System_On", ComponentType: "System", Type: "BOOL", Unit: ""},
{ComponentName: "Pump 1 Running", DP: enviroModule +".DeltaTherm_CoolingValues.Pump_Circuit_1_On", ComponentType: "Pump", Type: "BOOL", Unit: ""},
{ComponentName: "Pump 2 Running", DP: enviroModule +".DeltaTherm_CoolingValues.Pump_Circuit_2_On", ComponentType: "Pump", Type: "BOOL", Unit: ""},
{ComponentName: "Compressor Running", DP: enviroModule +".DeltaTherm_CoolingValues.Compressor_On", ComponentType: "Compressor", Type: "BOOL", Unit: ""},
{ComponentName: "Low Pressure in Circuit", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_ND_CoolCircuit", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "High Pressure in Circuit", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_HD_CoolCircuit", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Compressor Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_Compressor", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Valve Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_valve", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Pump 1 Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_Pump_1", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Pump 2 Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_Pump_2", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Dry Operation Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_Dry_Running", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Heater Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_Protect_Heater", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "STB Heater Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_STB_Heater", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Frost Protection Error", DP: enviroModule +".DeltaTherm_CoolingValues.Alarm_Frost_Protect", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Temperature Circuit 1 Low", DP: enviroModule +".DeltaTherm_CoolingValues.Temp_Circuit_1_Low", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Temperature Circuit 1 High", DP: enviroModule +".DeltaTherm_CoolingValues.Temp_Circuit_1_High", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Temperature Circuit 2 Low", DP: enviroModule +".DeltaTherm_CoolingValues.Temp_Circuit_2_Low", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Temperature Circuit 2 High", DP: enviroModule +".DeltaTherm_CoolingValues.Temp_Circuit_2_High", ComponentType: "Alarm", Type: "BOOL", Unit: ""},
{ComponentName: "Setpoint Circuit 2", DP: enviroModule +".DeltaTherm_CoolingValues.Setpoint_Circuit_2", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Setpoint Tank", DP: enviroModule +".DeltaTherm_CoolingValues.Setpoint_Tank", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Tank Temperature", DP: enviroModule +".DeltaTherm_CoolingValues.Temp_Tank", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Temperature flowing Circuit 2", DP: enviroModule +".DeltaTherm_CoolingValues.Temp_flow_Circuit_2", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Temperature Return Circuit_2", DP: enviroModule +".DeltaTherm_CoolingValues.Temp_Return_Circuit_2", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},

{ComponentName: "Inverter Ready", DP: enviroModule +".Controller_IOs[1].State", ComponentType: "System", Type: "BOOL", Unit: ""},

{ComponentName: "NO Cooling Water Level Low", DP: enviroModule +".Controller_IOs[2].State", ComponentType: "Alarm", Type: "BOOL", Unit: ""},


{ComponentName: "Cooling Fan 1", DP: enviroModule +".Controller_IOs[4].State", ComponentType: "System", Type: "BOOL", Unit: ""},
{ComponentName: "Cooling Fan 2", DP: enviroModule +".Controller_IOs[5].State", ComponentType: "System", Type: "BOOL", Unit: ""},
{ComponentName: "Valve Cooling Water Open", DP: enviroModule +".Controller_IOs[6].State", ComponentType: "System", Type: "BOOL", Unit: ""},

{ComponentName: "Temperature Returnflow Inverter", DP: enviroModule +".Controller_IOs[7].Average", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Environment Temperature", DP: enviroModule +".Controller_IOs[8].Average", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Indoor 1 Temperature", DP: enviroModule +".Controller_IOs[9].Average", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Indoor 2 Temperature", DP: enviroModule +".Controller_IOs[10].Average", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Temperature Transformator Room", DP: enviroModule +".Controller_IOs[11].Average", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Dew Point Battery Room", DP: enviroModule +".Controller_IOs[12].Average", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Fan HVAC", DP: enviroModule +".Controller_IOs[14].Average", ComponentType: "System", Type: "REAL", Unit: "°C"},

{ComponentName: "Bypass Valve", DP: enviroModule +".Controller_IOs[15].Value", ComponentType: "System", Type: "REAL", Unit: "%"},

{ComponentName: "Heater ON", DP: enviroModule +".Controller_IOs[16].State", ComponentType: "System", Type: "BOOL", Unit: ""},

{ComponentName: "Dewing Hysterese Warning", DP: enviroModule +".Controller_IOs[17].State", ComponentType: "Temperature", Type: "REAL", Unit: "°C"},
{ComponentName: "Solar Sensor", DP: enviroModule +".Controller_IOs[20].State", ComponentType: "System", Type: "REAL", Unit: "W/m2"},

]



initializeEnviroTable(EnviroMonitoringValues, enviroTable);


webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"id_3", "key":"FontFamily", "property":""});]]></script>
 <text x="16.25" y="22" fill="#647a8f" font-family="Varela Round" id="id_3" atv:refpx="24.135" atv:refpy="16.45" font-size="20" transform="matrix(0.94,0,0,0.94,0.7052,0)">HVAC AND ENVIRONMENT</text>
 <g atv:table-height="260" id="commands" atv:refpx="598.325" atv:table-width="640" atv:refpy="288.188" transform="matrix(0.94,0,0,0.94,116.0149,32.8994)">
  <rect width="900" fll="#647A8F" x="0" y="0" rx="5" ry="5" height="600" id="rect1" atv:refpx="800" atv:refpy="300"/>
 </g>
</svg>
