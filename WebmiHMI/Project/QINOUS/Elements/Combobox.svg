<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="85" version="1.2" xmlns="http://www.w3.org/2000/svg" height="20" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atv="http://webmi.atvise.com/2007/svgext">
 <defs>
  <linearGradient id="linear_21" y1="-0.0183441" x1="1" y2="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#494949"/>
   <stop offset="1" stop-color="#000000"/>
  </linearGradient>
  <linearGradient id="linear_6" y1="1" x1="0.223168" y2="0.149253" gradientUnits="objectBoundingBox" x2="0.223168">
   <stop offset="0" stop-color="#494949"/>
   <stop offset="1" stop-color="#000000"/>
  </linearGradient>
  <linearGradient id="linear_11" y1="-0.0183441" x1="1" y2="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#494949"/>
   <stop offset="1" stop-color="#000000"/>
  </linearGradient>
  <linearGradient id="linear_0" y1="0" x1="0" y2="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#d0d0d0"/>
   <stop offset="1" stop-color="#d0d0d0" stop-opacity="0"/>
  </linearGradient>
  <linearGradient id="linear_14" y1="-0.0183441" x1="1" y2="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#ffffff" stop-opacity="0.2745098039215687"/>
   <stop offset="0.5515695067264574" stop-color="#ffffff" stop-opacity="0"/>
  </linearGradient>
 </defs>
 <desc>Selects items from a dropdown listbox.</desc>
 <title>Combobox</title>
 <metadata>
  <atv:parameter desc="base" valuetype="address" behavior="mandatory" name="base"/>
  <atv:parameter config="Text;Boolean;Enum List;Script" desc="mode" valuetype="enum" behavior="optional" name="mode" defaultvalue="Text"/>
  <atv:parameter desc="alternative output address" valuetype="address" behavior="optional" name="outputNode"/>
  <atv:parameter desc="text element 1" valuetype="trstring" group="Text Mode" behavior="optional" name="text1"/>
  <atv:parameter desc="value element 1" valuetype="string" group="Text Mode" behavior="optional" name="text1value"/>
  <atv:parameter desc="text element 2" valuetype="trstring" group="Text Mode" behavior="optional" name="text2"/>
  <atv:parameter desc="value element 2" valuetype="string" group="Text Mode" behavior="optional" name="text2value"/>
  <atv:parameter desc="text element 3" valuetype="trstring" group="Text Mode" behavior="optional" name="text3"/>
  <atv:parameter desc="value element 3" valuetype="string" group="Text Mode" behavior="optional" name="text3value"/>
  <atv:parameter desc="text element 4" valuetype="trstring" group="Text Mode" behavior="optional" name="text4"/>
  <atv:parameter desc="value element 4" valuetype="string" group="Text Mode" behavior="optional" name="text4value"/>
  <atv:parameter desc="text element 5" valuetype="trstring" group="Text Mode" behavior="optional" name="text5"/>
  <atv:parameter desc="value element 5" valuetype="string" group="Text Mode" behavior="optional" name="text5value"/>
  <atv:parameter desc="enum list" valuetype="global" group="Enum List Mode" behavior="optional" name="enumList"/>
  <atv:parameter config="Bryant Regular=Bryant Regular" desc="family" valuetype="enum" substitute="$FONTFAMILY$" group="Font" behavior="optional" name="fontFamily" defaultvalue="Bryant Regular"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" desc="size" valuetype="enum" substitute="$FONTSIZE$" group="Font" behavior="optional" name="fontSize" defaultvalue="15"/>
  <atv:parameter desc="color" valuetype="color" substitute="$FONTCOLOR$" group="Font" behavior="optional" name="fontColor" defaultvalue="#647A8F"/>
  <atv:parameter desc="fill color" valuetype="color" substitute="$FILL$" group="Appearance" behavior="optional" name="fill" defaultvalue="#FFFFFF"/>
  <atv:parameter desc="fill color when inactive" valuetype="color" group="Appearance" behavior="optional" name="fillColorInactive" defaultvalue="#FFFFFF"/>
  <atv:parameter desc="button fill color" valuetype="color" substitute="$BUTTONFILL$" group="Appearance" behavior="optional" name="buttonFill" defaultvalue="#00ABE5"/>
  <atv:parameter desc="symbol fill" valuetype="color" group="Appearance" behavior="optional" name="symbolColor" defaultvalue="#d0d0d0"/>
  <atv:parameter desc="stroke color pressed" valuetype="color" group="Appearance" behavior="optional" name="strokePressed" defaultvalue="#00ABE5"/>
  <atv:parameter desc="focus stroke color" valuetype="color" group="Appearance" behavior="optional" name="focusStrokeColor" defaultvalue="#00ABE5"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" desc="necessary right" valuetype="number" group="Security" behavior="optional" name="right" defaultvalue=""/>
  <atv:parameter desc="activation address" valuetype="address" group="Security" behavior="optional" name="activeNode"/>
  <atv:parameter desc="activation value" valuetype="string" group="Security" behavior="optional" name="activeValue"/>
  <atv:parameter desc="maximum displayed items (0 = all)" valuetype="number" group="Options" behavior="optional" name="itemsCount" defaultvalue="0"/>
  <atv:parameter desc="consistency group" valuetype="string" group="Options" behavior="optional" name="consistencyGroup"/>
  <atv:parameter desc="tab index" valuetype="number" group="Options" behavior="optional" name="tabIndex"/>
  <atv:parameter desc="tooltip" valuetype="trstring" group="Options" behavior="optional" name="tooltip"/>
  <atv:gridconfig width="5" enabled="true" height="5" gridstyle="lines"/>
  <atv:snapconfig width="5" enabled="true" height="5"/>
 </metadata>
 <rect width="84.5" x="0.25" y="0.25" atv:bindtl="0,0" fill="$FILL$" rx="3.38" height="19.5" ry="2.516" stroke="#646464" atv:bindbr="1,1" id="combobox_stroke" atv:refpx="42.765" stroke-width="0" atv:refpy="10.661"/>
 <text x="4" y="15.5" atv:bindtl="0,1" fill="$FONTCOLOR$" font-family="Bryant Regular" text-anchor="start" atv:bindbr="0,1" id="combobox_label" atv:refpx="42.304" atv:refpy="9.568" font-size="12" transform="matrix(0.8906,0,0,0.8636,0,0.0682)">T{Combobox}</text>
 <polyline atv:bindtl="1,1" points="81.8,7.05 70,7.05 75.9,12.95 81.8,7.05" fill="$BUTTONFILL$" stroke="none" atv:bindbr="1,1" id="id_0" atv:refpx="81.779" stroke-width="0" atv:refpy="10.021"/>
 <svg width="100" x="0.296" y="0.398" atv:bindtl="0,0" height="31" atv:bindbr="1,1" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.FlatComponents.Clickarea" id="combobox_clickarea" atv:refpx="42.5" atv:refpy="10" transform="matrix(0.845,0,0,0.629,0,0)">
  <atv:overwrite width="83.5" height="18.499" id="button_clickarea" transform="matrix(1.1834,0,0,1.5898,0,0)"/>
  <atv:overwrite width="83.5" height="18.499" id="button_stroke_focus" transform="matrix(1.1834,0,0,1.5898,0,0)"/>
 </svg>
 <script type="text/ecmascript"><![CDATA[var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var outputNode = (webMI.query["outputNode"] == undefined) ? "" : webMI.query["outputNode"];
outputNode = (outputNode == "") ? base : outputNode;
webMI.gfx.setText("combobox_label", "");
var fontSize = parseFloat(webMI.query["fontSize"]);
var fontFamily = webMI.query["fontFamily"];
var fontColor = webMI.query["fontColor"];
var fill = webMI.query["fill"];
var fillColorInactive = webMI.query["fillColorInactive"];
var buttonFill = webMI.query["buttonFill"];
var strokeFillPressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var itemsCount = webMI.query["itemsCount"];
var consistencyGroup = webMI.query["consistencyGroup"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

var text1 = webMI.query["text1"];
var text1value = webMI.query["text1value"] == undefined ? "" :  webMI.query["text1value"];
var text2 = webMI.query["text2"];
var text2value = webMI.query["text2value"] == undefined ? "" :  webMI.query["text2value"];
var text3 = webMI.query["text3"];
var text3value = webMI.query["text3value"] == undefined ? "" :  webMI.query["text3value"];
var text4 = webMI.query["text4"];
var text4value = webMI.query["text4value"] == undefined ? "" :  webMI.query["text4value"];
var text5 = webMI.query["text5"];
var text5value = webMI.query["text5value"] == undefined ? "" :  webMI.query["text5value"];
var enumList = (webMI.query["enumList"] == undefined) ? "" : webMI.query["enumList"];
var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;
var currentValue = null;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

function deActivate(force) {
	if (force) active = false;
	else if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("combobox_stroke", webMI.query.fill); // was _bg
		webMI.gfx.setFill("button_bg", buttonFill)
	} else {
		webMI.gfx.setFill("combobox_stroke", webMI.query.fillColorInactive); // was _bg
		webMI.gfx.setFill("button_bg", fillColorInactive);
	}
}

var mode = webMI.query["mode"];

function update(item) {
	if (item == "") {getFn("","",null)(true); return;}
	for (var i in menuObj) {
		if (item == menuObj[i]["text"]) {
			menuObj[i]["value"](1);
			break;
		}
	}
}

if (base != "") {
	if (consistencyGroup) {
		consistencyHandler.register(consistencyGroup, base, update);
	} else {
		webMI.data.subscribe(base, function(e) {
			currentValue = e.value;
	//?????????????????????????
			if (mode == "Text") {
				var texts = [text1, text2, text3, text4, text5];
				var textvals = [text1value, text2value, text3value, text4value, text5value];
				webMI.gfx.setText("combobox_label", "choose command");
				for (var i=0; i<5; i++) {
					if (texts[i] != undefined && textvals[i] != undefined && currentValue == textvals[i]) {
						webMI.gfx.setText("combobox_label", texts[i]);
					}
				}
			} else if (mode == "Boolean") {
				if (currentValue == 0) {
					webMI.gfx.setText("combobox_label", "false");
				} else {
					webMI.gfx.setText("combobox_label", "true");
				}
			} else if (mode == "Enum List" && enumList != "") {
				webMI.gfx.setText("combobox_label", "");
				for (var i in enumList) {
					if (enumList[i].text != undefined && enumList[i].value != undefined && currentValue == enumList[i].value) {
						webMI.gfx.setText("combobox_label", enumList[i].text);
					}
				}
			} else if (mode == "Script") {
				webMI.gfx.setText("combobox_label", "");
				for (var i in menuObj) {
					if (currentValue == menuObj[i]["originalValue"]) {
						return webMI.gfx.setText("combobox_label", menuObj[i]["text"]);
					}
				}
			}
		});
	}
}

var menuObj = {};

if (mode == "Text") {
	var texts = [text1, text2, text3, text4, text5];
	var textvals = [text1value, text2value, text3value, text4value, text5value];
	for (var i=0; i<5; i++) {
		if (texts[i] != undefined && textvals[i] != undefined) {
			menuObj[i] = { text: texts[i], value: getFn(texts[i], textvals[i], (i)) };
		}
	}
} else if (mode == "Boolean") {
	menuObj = {
		1: {text: "true", value: getFn("true", true, 0)},
		2: {text: "false", value: getFn("false", false, 1)}
	};
} else if (mode == "Enum List" && enumList != "") {
	var cnt = 0;
	for (var i in enumList) {
		if (enumList[i].text != undefined && enumList[i].value != undefined) {
			menuObj[cnt] = { text: enumList[i].text, value: getFn(enumList[i].text, enumList[i].value, cnt) };
			cnt++;
		}
	}
}

var selectedIndex = -1;
var selectedItem = null;

function getFn(text, value, idx) {
	return function(e) {
		webMI.trigger.fire("valuechanged", value, "");
		webMI.gfx.setText("combobox_label", text);
		if (outputNode != null && outputNode != "" && !consistencyGroup) {
			webMI.data.write(outputNode, value);
		}
		selectedIndex = idx;
		selectedItem = { text: text, value: value, idx: idx };

		if (consistencyGroup && e !== 1)
			consistencyHandler.set(consistencyGroup, base, value);
	};
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("combobox_bg", focusStrokeColor);
	}
}
function blurTH(){
	if (active) {
		backTH();
		webMI.gfx.setStroke("combobox_bg", "none");
	}
}
function applyTH(){
	openMenu();
	webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Open Context Menu", {
		"id":"combobox_clickarea",
		onEvent: "immediately",
		menuObj: menuObj,
		"outputNode":outputNode,
		"x":0,
		"y":30,
		active: function() {
			return (active);
		},
		"itemsCount": itemsCount,
		"fontSize": fontSize
	});
}
function backTH(){
	webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Open Context Menu", {
		"id":"",
		onEvent: "immediately"
	});
}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		blurTH();
	} else if (keyTH == "apply"){
		applyTH();
	} else if (keyTH == "space"){
		applyTH();
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("combobox_clickarea").parentNode);
	}
}

webMI.trigger.connect("setSelectedItem", function(e) {
	var item = e.value;
	webMI.gfx.setText("combobox_label", item);
	if (item == "") {getFn("","",null)(); return;}
	for (var i in menuObj) {
		if (item == menuObj[i]["text"]) {
			menuObj[i]["value"]();
			break;
		}
	}
}, "");

function openMenu() {
	if (!active) return;
	webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Open Context Menu", {
		"id":"combobox_clickarea",
		onEvent: "immediately",
		menuObj: menuObj,
		"outputNode":outputNode,
		"x":0,
		"y":20,
		active: function() {
			return true;
		},
		"itemsCount": itemsCount,
		"fontSize": fontSize
	});
}

webMI.addEvent("combobox_clickarea", ('ontouchend' in window) ? 'touchend' : 'click', function(e) { // 
	openMenu();
});




webMI.addEvent("combobox_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

webMI.trigger.connect("setItems", function(e) {
	var value = e.value;

	for (var i in menuObj)
		delete menuObj[i];

	var cnt = 0;
	for (var i in value) {
		if (currentValue == value[i].value) {
			getFn(value[i].text, value[i].value, cnt)();
		}

		menuObj[cnt] = { text: value[i].text, value: getFn(value[i].text, value[i].value, cnt), originalValue: value[i].value };
		cnt++;
	}
});

webMI.trigger.connect("addItem", function(e) {
	var value = e.value;
	var cnt = 0;
	for (var i in menuObj) {
		cnt++;
	}
	menuObj[cnt+1] = { text: value.text, value: getFn(value.text, value.value, cnt) };
});


webMI.trigger.connect("getSelectedItem", function(e) {
var id = "";
var value = e.value;
	if (typeof value == "function"){
		value(selectedItem);
	}
	else {
		webMI.trigger.fire("selectedItem", selectedItem, "");
	}
});

webMI.trigger.connect("getItems", function(e) {
	var items = [];
	for (var i in menuObj) {
		if (i != "style") {
			items.push(menuObj[i]);
		}
	}
	webMI.trigger.fire("items", items, "");
});
webMI.addOnload(function() {
	var doc = document.getElementById("combobox_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"combobox_clickarea", "text":tooltip});
}

// Theming
/*
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"fill", "defaultValue":"#00ABE5", "id":"id_0", "key":"ControlTintColor", "property":"buttonFill"});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"fill", "defaultValue":"#EEF1F2", "id":"combobox_stroke", "key":"ControlBackgroundColor", "property":"fill"});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"fill", "defaultValue":"#ffffff", "id":"combobox_label", "key":"ControlTextColor", "property":"fontColor"});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"Open Sans", "id":"combobox_label", "key":"FontFamily", "property":"fontFamily"});
*/

// Reset frame and text scaling
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.ResetScaling", { callback: function(originalSize, renderedSize, scale, scaleInverse) {
	if (!document.getElementById('combobox_stroke').getAttribute('transform')) {
		webMI.gfx.setScaleX('combobox_label', scaleInverse.x);
		webMI.gfx.setScaleX('id_0', scaleInverse.x);
		webMI.gfx.setScaleX('combobox_stroke', scaleInverse.x);
		webMI.gfx.setWidth('combobox_stroke', renderedSize.width);
		webMI.gfx.setMoveX('combobox_stroke', -(renderedSize.width - originalSize.width) / 2);
	}
}, originalWidth: 100, originalHeight: 31, innerNode: document.getElementById('combobox_clickarea') });

// TwoHand support
var _active = true;
webMI.trigger.connect('com.bachmann.themechange', function(e) { deActivate(!_active) });
webMI.trigger.connect('com.atvise.setActive', function(e) {
	_active = e.value;
	deActivate(!e.value);
});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"combobox_label", "key":"FontFamily", "property":""});]]></script>
</svg>
