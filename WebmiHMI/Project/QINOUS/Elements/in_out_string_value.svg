<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="150" version="1.2" xmlns="http://www.w3.org/2000/svg" height="25" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atv="http://webmi.atvise.com/2007/svgext">
 <desc>Sets/displays a value to/from an address.</desc>
 <title>In/Out Value</title>
 <defs>
  <linearGradient id="linear_12" y1="-0.0183441" x1="1" y2="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#494949"/>
   <stop offset="1" stop-color="#000000"/>
  </linearGradient>
  <linearGradient id="linear_0" y1="1.01745" x1="0.146915" y2="0.104475" gradientUnits="objectBoundingBox" x2="0.146915">
   <stop offset="0" stop-color="#494949"/>
   <stop offset="1" stop-color="#000000"/>
  </linearGradient>
 </defs>
 <metadata>
  <atv:parameter desc="base" valuetype="address" behavior="mandatory" name="base" defaultvalue=""/>
  <atv:parameter config="Number;Boolean;String;Password" desc="input mode" valuetype="enum" behavior="optional" name="validation" defaultvalue="String"/>
  <atv:parameter config="Yes;No" desc="allow direct input" valuetype="enum" behavior="optional" name="allowDirectInput" defaultvalue="Yes"/>
  <atv:parameter desc="displayed unit" valuetype="trstring" group="Number Format" behavior="optional" name="unit"/>
  <atv:parameter desc="show sign" valuetype="bool" group="Number Format" behavior="optional" name="sign" defaultvalue="false"/>
  <atv:parameter desc="leading zeros" valuetype="number" group="Number Format" behavior="mandatory" name="leadingZeros" defaultvalue="0"/>
  <atv:parameter desc="post decimal positions" valuetype="number" group="Number Format" behavior="mandatory" name="postDecimal" defaultvalue="0"/>
  <atv:parameter desc="force decimal fraction position" valuetype="number" group="Number Format" behavior="optional" name="decimalFraction" defaultvalue=""/>
  <atv:parameter desc="enum list" valuetype="global" group="Enum List Mode" behavior="optional" name="enumList" defaultvalue=""/>
  <atv:parameter config="Bryant=Bryant-Bold,Bryant-BoldAlternate,Bryant-Light,Bryant-LightAlternate,Bryant-Medium,Bryant-Regular,Bryant-RegularAlternate ;Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" desc="family" valuetype="enum" substitute="$FONTFAMILY$" group="Font" behavior="optional" name="fontFamily" defaultvalue="Arial"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" desc="size" valuetype="enum" substitute="$FONTSIZE$" group="Font" behavior="optional" name="fontSize" defaultvalue="15"/>
  <atv:parameter desc="color" valuetype="color" substitute="$FONTCOLOR$" group="Font" behavior="optional" name="fontColor" defaultvalue="#BAC4D0"/>
  <atv:parameter desc="fill color" valuetype="color" substitute="$FILL$" group="Appearance" behavior="optional" name="fill" defaultvalue="#d0d0d0"/>
  <atv:parameter desc="fill color not editable" valuetype="color" group="Appearance" behavior="optional" name="fillNotEditable" defaultvalue="#ffffff"/>
  <atv:parameter desc="fill color when inactive" valuetype="color" group="Appearance" behavior="optional" name="fillColorInactive" defaultvalue="#8c8c8c"/>
  <atv:parameter desc="limit low low (off=no limit)" valuetype="string" group="Limits" behavior="optional" name="limitLowLow" defaultvalue="off"/>
  <atv:parameter desc="limit low (off=no limit)" valuetype="string" group="Limits" behavior="optional" name="limitLow" defaultvalue="off"/>
  <atv:parameter desc="limit high (off=no limit)" valuetype="string" group="Limits" behavior="optional" name="limitHigh" defaultvalue="off"/>
  <atv:parameter desc="limit high high (off=no limit)" valuetype="string" group="Limits" behavior="optional" name="limitHighHigh" defaultvalue="off"/>
  <atv:parameter desc="limit low low color" valuetype="color" group="Limits" behavior="optional" name="limitLowLowFill" defaultvalue="#ff0000"/>
  <atv:parameter desc="limit low color" valuetype="color" group="Limits" behavior="optional" name="limitLowFill" defaultvalue="#ffff00"/>
  <atv:parameter desc="limit high color" valuetype="color" group="Limits" behavior="optional" name="limitHighFill" defaultvalue="#ffff00"/>
  <atv:parameter desc="limit high high color" valuetype="color" group="Limits" behavior="optional" name="limitHighHighFill" defaultvalue="#ff0000"/>
  <atv:parameter desc="focus stroke color" valuetype="color" group="Appearance" behavior="optional" name="focusStrokeColor" defaultvalue="#FFFFFF"/>
  <atv:parameter config="Yes;No" desc="editable" valuetype="enum" group="Security" behavior="optional" name="editable" defaultvalue="Yes"/>
  <atv:parameter config="Yes;No" desc="password mode" valuetype="enum" group="Options" behavior="hidden" name="password" defaultvalue="No"/>
  <atv:parameter desc="alternative output address" valuetype="address" group="Options" behavior="optional" name="outputNode" defaultvalue=""/>
  <atv:parameter desc="minimum" valuetype="number" group="Limits" behavior="optional" name="min" defaultvalue="off"/>
  <atv:parameter desc="maximum" valuetype="number" group="Limits" behavior="optional" name="max" defaultvalue="off"/>
  <atv:parameter desc="address for minimum" valuetype="address" group="Limits" behavior="optional" name="nodeMin" defaultvalue=""/>
  <atv:parameter desc="address for maximum" valuetype="address" group="Limits" behavior="optional" name="nodeMax" defaultvalue=""/>
  <atv:parameter desc="address for limit low low" valuetype="address" group="Limits" behavior="optional" name="nodeLowLow" defaultvalue=""/>
  <atv:parameter desc="address for limit low" valuetype="address" group="Limits" behavior="optional" name="nodeLow" defaultvalue=""/>
  <atv:parameter desc="address for limit high" valuetype="address" group="Limits" behavior="optional" name="nodeHigh" defaultvalue=""/>
  <atv:parameter desc="address for limit high high" valuetype="address" group="Limits" behavior="optional" name="nodeHighHigh" defaultvalue=""/>
  <atv:parameter desc="consistency group" valuetype="string" group="Options" behavior="optional" name="consistencyGroup" defaultvalue=""/>
  <atv:parameter desc="tab index" valuetype="number" group="Options" behavior="optional" name="tabIndex" defaultvalue=""/>
  <atv:parameter desc="tooltip" valuetype="trstring" group="Options" behavior="optional" name="tooltip"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" desc="necessary right" valuetype="address" group="Security" behavior="optional" name="right" defaultvalue=""/>
  <atv:parameter desc="activation address" valuetype="address" group="Security" behavior="optional" name="activeNode" defaultvalue=""/>
  <atv:parameter desc="activation value" valuetype="string" group="Security" behavior="optional" name="activeValue" defaultvalue="off"/>
  <atv:parameter desc="select text on focus" valuetype="bool" group="Options" behavior="optional" name="selectTextOnFocus" defaultvalue="false"/>
  <atv:gridconfig width="10" enabled="true" height="10" gridstyle="lines"/>
  <atv:snapconfig width="10" enabled="true" height="10"/>
 </metadata>
 <rect width="152" x="0" y="1.25" atv:bindtl="0,0" fill="none" rx="3" height="22.5" ry="3" stroke="none" atv:bindbr="1,1" id="blinking_frame" atv:refpx="120.19" stroke-width="3" atv:refpy="16.25"/>
 <text x="4.5" y="17" atv:bindtl="1,0.5" fill="$FONTCOLOR$" font-family="Bryant Regular" text-anchor="start" atv:bindbr="1,0.5" id="input_label" atv:refpx="58.879" atv:refpy="12.75" font-size="$FONTSIZE$" transform="matrix(1.0526,0,0,1,0,0)">{String Value}</text>
 <script type="text/ecmascript"><![CDATA[var inputMode = webMI.query["validation"]; //implement if hasFeature html5 input types
var inputFO = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "input");
var isPasswordMode = (inputMode == "Password" || webMI.query["password"] == "Yes");
inputFO.type = isPasswordMode ? "password" : "text"; //implement e-mail when browsers support it
inputFO.id = "html_input";
inputFO.style.width = "100%";
inputFO.style.height = "100%";
inputFO.style.borderWidth = "0px";
inputFO.style.padding = "0px";
inputFO.style.textAlign = "right";
inputFO.style.color = webMI.query["fontColor"];
inputFO.style.fontFamily = webMI.query["fontFamily"];
inputFO.style.fontSize = parseFloat(webMI.query["fontSize"])*0.0820625+"em";
var foreignObject = null;
var createdForeignObject = false;
var data = {};
var security = {};
var initialized = false;
var value = null;
var nodeToSubscribe = (webMI.query["outputNode"] != "") ? webMI.query["outputNode"] : webMI.query["base"];
var decimalFraction = parseInt(webMI.query["decimalFraction"], 10);
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");
var consistencyGroup = webMI.query["consistencyGroup"];
var preventFirstConsistencyRead = true;
var storedEvent = {"keyCode": null, "shiftKey": false};
var backgroundColor = webMI.query["fill"];

webMI.addOnload(function(e) {
	var remaining = 8;
	data = {
		"min":			{"value":null, "address": webMI.query["nodeMin"], "paramValue": webMI.query["min"]},
		"max":			{"value":null, "address": webMI.query["nodeMax"], "paramValue": webMI.query["max"]},
		"limitLowLow":	{"value":null, "address": webMI.query["nodeLowLow"], "paramValue": webMI.query["limitLowLow"]},
		"limitLow":		{"value":null, "address": webMI.query["nodeLow"], "paramValue": webMI.query["limitLow"]},
		"limitHigh":	{"value":null, "address": webMI.query["nodeHigh"], "paramValue": webMI.query["limitHigh"]},
		"limitHighHigh":{"value":null, "address": webMI.query["nodeHighHigh"], "paramValue": webMI.query["limitHighHigh"]},
		"activeNode":	{"value":null, "address": webMI.query["activeNode"], "paramValue": ""},
		"activeValue":	{"value":null, "address": "", "paramValue": webMI.query["activeValue"]},
		"base":			{"value":null, "address": webMI.query["base"], "paramValue": ""}
	};

	function initVariables(value, address, id) {
		if(id == "base" && consistencyGroup != "" && address != "") {
			webMI.data.read(address, function(e) {
				data[id]["value"] = e.value;
			});
			consistencyHandler.register(consistencyGroup, address, handleInput);
			reduceRemaining();
		} else if (address != "") {
			webMI.data.subscribe(address, function(e) {
				data[id]["value"] = e.value;
				reduceRemaining();
			});
		} else if (!isNaN(parseFloat(value))) {
			data[id]["value"] = parseFloat(value);
			reduceRemaining();
		} else if (typeof value == "string" && value != "off") {
			data[id]["value"] = value;
			reduceRemaining();
		} else
			reduceRemaining();

		function reduceRemaining() {
			if(!initialized)
				initialized = (--remaining == 0);
			else
				handleInput();
		}
	}

	for(var i in data)
		initVariables(data[i]["paramValue"], data[i]["address"], i);

	var doc = document.getElementById("svg_input").ownerDocument;
	tabHandler.register(webMI.query["tabIndex"],keyHandler,doc);

	if (webMI.query["tooltip"] != undefined)
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"clickareaFO", "text":webMI.query["tooltip"]});
});

function setColorization() {
	function setBackground(color) {
		webMI.gfx.setFill("input_bg", color);
		inputFO.style.backgroundColor = color;
	}

	if(data["limitLowLow"]["value"] != null && value <= data["limitLowLow"]["value"])
		setBackground(webMI.query["limitLowLowFill"]);
	else if(data["limitLow"]["value"] != null && value <= data["limitLow"]["value"])
		setBackground(webMI.query["limitLowFill"]);
	else if(data["limitHighHigh"]["value"] != null && value >= data["limitHighHigh"]["value"])
		setBackground(webMI.query["limitHighHighFill"]);
	else if(data["limitHigh"]["value"] != null && value >= data["limitHigh"]["value"])
		setBackground(webMI.query["limitHighFill"]);
	else if(!security["hasRight"] || !security["activateInput"] || !security["activated"])
		setBackground(webMI.query["fillColorInactive"]);
	else if(security["outputModeOnly"])
		setBackground(webMI.query["fillNotEditable"]);
	else
		setBackground(webMI.query["fill"]);
}

function handleInput(consistencyValue){
	//preventing first ConsistencyRead, as it would call handleInput without a consistencyValue
	if(consistencyGroup != "" && preventFirstConsistencyRead) {
		preventFirstConsistencyRead = false;
		return;
	}

	if(consistencyValue && consistencyGroup != "")
		consistencyHandler.set(consistencyGroup, data["base"]["address"], consistencyValue); //does not support alternative node

	value = (consistencyValue == undefined) ? data["base"]["value"] : consistencyValue;

	webMI.trigger.fire("valuechanged", (value == null) ? "" : value, "");

	var formattedOutput = null;
	var enumList = webMI.query["enumList"];

	if (isPasswordMode)
		formattedOutput = "*** T{Password} ***";
	else if(enumList != "") {
		formattedOutput = (enumList[value] != undefined) ? enumList[value].value : value + " not in enum list";
		value = (enumList[value] != undefined) ? enumList[value].value : value;
	} else if(inputMode == "Number") {
		var leadingZeros = parseInt(webMI.query["leadingZeros"], 10);
		var postDecimal = parseInt(webMI.query["postDecimal"], 10);
		var sign = webMI.query["sign"] == "true";
		var unit = webMI.query["unit"];
		var fieldWidth = 0;
		formattedOutput = (value != null) ? value : "";

		if(!isNaN(decimalFraction) && decimalFraction > 0)
			formattedOutput = formattedOutput / Math.pow(10, decimalFraction);

		if(!isNaN(leadingZeros) && leadingZeros > 0)
			fieldWidth += leadingZeros;

		if(!isNaN(postDecimal) && postDecimal > 0) {
			if(postDecimal > 9)
				postDecimal = 9;
			fieldWidth += (postDecimal + 1);
		}

		if(!isNaN(leadingZeros) && !isNaN(postDecimal)) {
			var formatString = ((sign) ? "%+" : "%") + "0" + fieldWidth + "." + postDecimal + "f";
			formattedOutput = webMI.sprintf(formatString, formattedOutput);
		}

		value = formattedOutput;

		if(unit != undefined)
			formattedOutput = formattedOutput + " " + unit;
	}

	webMI.gfx.setText("input_label", (formattedOutput != null) ? formattedOutput : value);

	security = {
		"outputModeOnly": (webMI.query["editable"] == "No"),
		"activateInput": (data["activeValue"]["value"] == null || data["activeNode"]["value"] == null) || data["activeValue"]["value"] == String(data["activeNode"]["value"]),
		"hasRight": true,
		"activated": (typeof security["activated"] === "boolean") ? security["activated"] : true
	};

	var requiredRight = webMI.query["right"];

	if (requiredRight != "") {
		if (requiredRight.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1)
			requiredRight = requiredRight.substring(23,requiredRight.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.

		webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
			security["hasRight"] = webMI.hasRight(requiredRight);
			if(!security["hasRight"])
				switchToOutputMode();
			setColorization();
		});
	}

	if(!security["activateInput"])
		switchToOutputMode();

	//workaround until apple Bug ID 12900899 has been solved and the foreignobject clickarea is no longer required
	if(security["outputModeOnly"])
		webMI.gfx.setVisible("clickareaFO", false);

	if(inputMode == "Number")
		value = parseFloat(value);

	setColorization();
}

function switchToOutputMode() {
	webMI.gfx.setVisible("svg_input", null);
	webMI.gfx.setVisible(foreignObject, false);
}

function switchToInputMode(){
	if(security["hasRight"] && !security["outputModeOnly"] && security["activateInput"] && security["activated"]) {

		var directKeyboardMode = webMI.query["allowDirectInput"] == "Yes";
		var useSVGKeyboard = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Configuration", {"action":"existsIndexParameter", "parameterName":"useSVGKeyboard"});
		if(useSVGKeyboard == "true")
			directKeyboardMode = false;

		function setFocus() {
			inputFO.focus();
			if(webMI.query["selectTextOnFocus"] == "true")
				inputFO.select();
		}

		if(directKeyboardMode) {
			tabHandler.setAcceptKeys(false);
			inputFO.value = value;
			webMI.gfx.setVisible("svg_input", false);
			if(!createdForeignObject) {
				var textboxGroup = document.getElementById("input_element");
				foreignObject = webMI.gfx.addForeignObject({x:0, y:0, width:160, height:30, id:"input_fo", childNodes: [inputFO]}, textboxGroup);
				foreignObject.style.border = "black 2px solid";
				createdForeignObject = true;
				setFocus();
			 } else {
				webMI.gfx.setVisible(foreignObject, null);
				setFocus();
			}
		} else { //SVG Mode
			function getDisplayParameters(){
				var communicationID = new Date().getTime().toString();
				webMI.trigger.connect(communicationID, function(e) {
					checkInput(e.value);
				});

				var passObj = {};
				for (var i in webMI.query)
					passObj[i] = webMI.query[i];
				passObj["minValue"] = data["min"]["value"];
				passObj["maxValue"] = data["max"]["value"];
				if (nodeToSubscribe != "" && consistencyGroup == "")
					passObj["target"] = nodeToSubscribe;
				if (nodeToSubscribe == "" || consistencyGroup != "")
					passObj["trigger"] = communicationID;
				if (isPasswordMode)
					passObj["password"] = "Yes";
				return passObj;
			}

			var keyboard = null;
			var size = (inputMode != undefined && inputMode == "Number") ? {w: 438, h: 378} : {w: 550, h: 250};

			if (inputMode != undefined && inputMode == "Number")
				keyboard = "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Standard.keyboard.number_keyboard";
			else
				keyboard = "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Standard.keyboard.keyboard";

			var keyboardParam = getDisplayParameters();
			webMI.display.openWindow({display:keyboard,extern:false,height:size.h,menubar:false,modal:true,movable:true,resizable:false,scrollbars:false,status:false,title:"T{Keyboard}",toolbar:false,width:size.w,query:keyboardParam});
		}
	}
}

function keyHandler(keyTH,param2){
	if (keyTH == "focus")
		webMI.gfx.setStroke("input_bg", webMI.query["focusStrokeColor"]);
	else if (keyTH == "blur")
		webMI.gfx.setStroke("input_bg", "none");
	else if (keyTH == "apply")
		switchToInputMode();
	else if (keyTH == "isActive")
		return (security["hasRight"] && !security["outputModeOnly"] && security["activateInput"] && security["activated"] && param2(document.getElementById("svg_input").parentNode));
}

webMI.addEvent("clickareaFO", "click", function(e) {
	tabHandler.setCurrentIndex(keyHandler);
	switchToInputMode();
});

function stopPropagation(event) {
	/*
	 * If the ALT key is pressed together with one or more other keys on
	 * Firefox (only Windows), there will be no keyup event when the ALT
	 * key gets released. Since the ALT key is being used for paning in
	 * atvise visualization, we have to make sure that key listeners in the
	 * global document do not get triggered if someone is currently entering
	 * something in the inputFO (like "someone@example.com").
	**/
	if (event.altKey){
		if (event.stopPropagation)
			event.stopPropagation();
		else
			event.cancelBubble = true;
	}
}

webMI.addEvent(inputFO, "keyup", stopPropagation);
webMI.addEvent(inputFO, "keydown", function(e) {
	var keyCode = e.keyCode;
	if (/MSIE/.test(navigator.userAgent)){
		storedEvent["keyCode"] = e.keyCode;
		storedEvent["shiftKey"] = e.shiftKey;
	}
	if(keyCode == "13" || keyCode == "9") {
		inputFO.blur();
		if (keyCode == "13") tabHandler.setAcceptKeysPrevent(true);
	} else if(keyCode == "27"){
		storedEvent["keyCode"] = "27";
		tabHandler.setAcceptKeysPrevent(true);
		inputFO.blur();
	}

	stopPropagation(e);
});

inputFO.onblur = function() {
	switchToOutputMode();
	tabHandler.setAcceptKeys(true);

	if (storedEvent["keyCode"] != null){
		if (storedEvent["shiftKey"] && storedEvent["keyCode"] == "9")
			tabHandler.prevTab();
		else if (storedEvent["keyCode"] == "9")
			tabHandler.nextTab();
	}

	if (storedEvent["keyCode"] != "27"){
		//workaround: setTimeout for Chrome crash error (clicking out from the input field or clicking enter while holding a button pressed).
		setTimeout(function(){
			checkInput(inputFO.value);
		},0);
	}

	storedEvent["keyCode"] = null;
};

function checkInput(tempValue) {
	var tempValue = String(tempValue);
	var regexps = { "Boolean":"(true|false|0|1)", "Number":"[+-]*[0-9]+(\.[0-9]+)?", "String":".*", "Password":".*" };
	if(new RegExp("^"+regexps[inputMode]+"$", "i").test(tempValue)) {
		if(inputMode == "Boolean")
			tempValue = (tempValue.toLowerCase() == "true" || tempValue == "1") ? true : false;
		else if(inputMode == "Number")
			tempValue = tempValue = parseFloat(tempValue.replace(",","."));
	} else {
		console.warn("Please enter a valid format according to the selected input mode.");
		return;
	}

	if(inputMode == "Number") {
		if(data["min"]["value"] != null && tempValue < data["min"]["value"]) {
			alert("T{Value too low}");
			return;
		} else if(data["max"]["value"] != null && tempValue > data["max"]["value"]) {
			alert("T{Value too high}");
			return;
		}

		if(!isNaN(decimalFraction) && decimalFraction > 0)
			tempValue = tempValue * Math.pow(10, decimalFraction);

		writeValue(tempValue);
	} else if(inputMode == "String" || inputMode == "Boolean" || inputMode == "Password")
		writeValue(tempValue);

	function writeValue(tempValue) {
		if(consistencyGroup == "" && nodeToSubscribe != ""){
			webMI.data.write(nodeToSubscribe, tempValue);
			webMI.trigger.fire("com.atvise.outputvaluechanged", tempValue, "");
		} else
			handleInput(tempValue);

	}
}

webMI.trigger.connect("setValue", function(e) {
	checkInput(e.value);
});

webMI.trigger.connect("com.atvise.setActive",function(e){
	security["activated"] = e.value;

	setColorization();
	switchToOutputMode();
});

webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		webMI.gfx.setStroke("blinking_frame", e.value);
		webMI.gfx.setVisible("blinking_frame", null);
	} else {
		webMI.gfx.setStroke("blinking_frame", e.value);
		webMI.gfx.setVisible("blinking_frame",{0:true,2:false,4:true,6:false,8:true,10:false});
	}
});

webMI.trigger.connect("com.atvise.setBackground", function(e){
	backgroundColor = (e.value == "") ? webMI.query["fill"] : e.value;
	setColorization();
});
]]></script>
</svg>
