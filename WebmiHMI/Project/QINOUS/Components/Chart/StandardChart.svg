<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="470" version="1.2" xmlns="http://www.w3.org/2000/svg" height="220" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atv="http://webmi.atvise.com/2007/svgext">
 <defs/>
 <metadata>
  <atv:gridconfig width="5" enabled="true" height="5" gridstyle="lines"/>
  <atv:snapconfig width="5" enabled="true" height="5"/>
 </metadata>
 <foreignObject width="468" x="1" y="1" height="218" id="id_0">
  <div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%" id="chart_container"/>
 </foreignObject>
 <rect width="470" x="0" y="0" fill="none" rx="4.296" ry="4.409" height="220" stroke="#DADCDD" stroke-linejoin="round" id="id_1" stroke-linecap="round" atv:refpx="275.874" stroke-width="1" atv:refpy="115.613"/>
 <script type="text/ecmascript" xlink:href="/scope.js"/>
 <script type="text/ecmascript" xlink:href="/js/stock/highstock.js"/>
 <script type="text/ecmascript" xlink:href="/q/StdConstantsFunctions.js"/>
 <script type="text/ecmascript" xlink:href="/q/DiagramDatasets.js"/>
 <script type="text/ecmascript" xlink:href="/q/DiagramFunctions.js"/>
 <script type="text/ecmascript"><![CDATA[var $ = top.$;
var data = [];
var labels = [];
var container = document.getElementById("chart_container");

var highchart;
var channelData = [];


webMI.trigger.connect("SetChartInfo", function(f){

	console.log("Standard chart has recieved the monitoring node!");
	var node = f.value[0];
	LocalTimeSystemTimeDiff = f.value[1];
	BrowserTimeSystemTimeDiff = f.value[2];
	var frontspec;

	// get the corresponding chartdata for this node
	// and extract the frontspec
	for (var i=0; i<ChartData.length; i++){
		if (ChartData[i].type == node.Type){
			frontspec = ChartData[i].frontspec;	
			break;			
		}
	}

	console.log("got a spec for the front page", frontspec, node);
	//console.log("jquery element?:", container);
	highchart = $(container).highcharts({

		exporting: {
			enabled: false
		},
		chart: {
			type: 'spline',
			spacingBottom: 10,
			spacingTop: 2,
			spacingLeft: 2,
			spacingRight: 35,
			width: null,
			height: null,
			zoomType: 'xy',
			alignTicks: true,
			animation: {
				duration: 1500,
				easing: 'easeOutBounce'
				},
			events: {
				load: function () {

				
					// build up necessary data and feed to the callbacks 
					var timeSpan = 60 * 1000 * 60;
					var startTime = Date.now() - BrowserTimeSystemTimeDiff - timeSpan;
				
				
					// get historical data -- this will add data to each series -- must complete before loading chart!
					var recorderSeriesList = [];
					var tocList = [];
				
					for (var i=0; i<frontspec.data.length; i++) {
				
						tocList.push({ toc: {}});
						recorderSeriesList.push([]);
						for (var j=0; j<frontspec.data[i].series.length; j++){
				
							recorderSeriesList[recorderSeriesList.length -1].push(this.addSeries(frontspec.data[i].series[j]));
				
						}
				
						var recordername = getRecorderPrefix(node) + "_" + frontspec.data[i].recorder;
						
						console.log("Getting contents of ", recordername);
				
						Scope.getContent(
							recordername, 
							getContentAndAddSeries(
								tocList[i],
								frontspec.data[i], 
								recorderSeriesList[i], 
								node,
								LocalTimeSystemTimeDiff, 
								startTime, 
								startTime + timeSpan));
					}

				}
			}
		},
		credits: {
			enabled: false
		},
		navigator: {
			enabled : false,
			height: 10			
		},
		rangeSelector : {
			enabled : false,
			selected : 1
		},
		title : {
			text: '',
			style: {
				display: 'none'
			}
		},
		 xAxis: {
			type: 'datetime',
			dateTimeLabelFormats: { // don't display the dummy year
				month: '%e. %b',
				year: '%b'
			},
			title: {
				text: 'Date'
			}
		},
		legend: {
				enabled : false,
				layout: 'horizontal',
				align: 'left',
				verticalAlign: 'bottom',
				borderWidth: 0
			},
		tooltip:{
			enabled: true			
		}
	
	}); // end chart

	highchart = $(container).highcharts();
			

}); // end onload

webMI.trigger.fire("ChartInfoRequest");





]]></script>
</svg>
