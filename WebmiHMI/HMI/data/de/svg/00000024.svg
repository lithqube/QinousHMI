<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="430" version="1.2" height="280" visibility="hidden" atv:oe="2BC6E3AA8376K2JED9HCH6G8L7O4P31F365AECD499I181IBLDHCP3HBN5KFQDC83" xmlns="http://www.w3.org/2000/svg">
 <defs/>
 <desc>Simple display that can be used as dialog to login.</desc>
 <title>Login dialog</title>
 <metadata/>
 <rect width="430" x="0" y="0" fill="none" height="280" stroke="none" id="background" atv:refpx="215" stroke-width="0" atv:refpy="140"/>
 <rect width="390" x="20" y="132" fill="none" rx="10" height="50" ry="10" stroke="#647a8f" id="id_13" atv:refpx="-186.142" stroke-width="2" atv:refpy="105"/>
 <rect width="390" x="20" y="72" fill="none" rx="10" height="50" ry="10" stroke="#647a8f" id="username_background" atv:refpx="215" stroke-width="2" atv:refpy="115"/>
 <g transform="matrix(1.4375,0,0,1.3333,0,0)">
  <svg width="160" x="118.261" y="57.75" height="30" id="username_input" atv:refpx="285" atv:refpy="115">
   <defs>
    <linearGradient id="1linear_12" y1="-0.0183441" x1="1" y2="1" gradientUnits="objectBoundingBox" x2="1">
     <stop offset="0" stop-color="#494949"/>
     <stop offset="1" stop-color="#647A8F"/>
    </linearGradient>
    <linearGradient id="1linear_0" y1="1.01745" x1="0.146915" y2="0.104475" gradientUnits="objectBoundingBox" x2="0.146915">
     <stop offset="0" stop-color="#494949"/>
     <stop offset="1" stop-color="#647A8F"/>
    </linearGradient>
   </defs>
   <metadata/>
   <g id="username_input_input_element" atv:refpx="0" atv:refpy="0"/>
   <g id="username_input_svg_input" atv:refpx="80" atv:refpy="15">
    <rect width="229.5" x="0.25" y="0.25" atv:bindtl="0,0" fill="none" rx="5" height="39.5" ry="5" stroke="none" atv:bindbr="1,1" id="username_input_id_0" atv:refpx="80.25" stroke-width="0" atv:refpy="15.5" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <rect width="224.5" x="2.75" y="2.75" atv:bindtl="0,0" fill="none)" rx="5" height="34.5" ry="5" stroke="none" atv:bindbr="1,1" id="username_input_id_2" atv:refpx="117.754" stroke-width="0" atv:refpy="-9.5" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <rect width="222" x="4" y="3.75" atv:bindtl="0,0" fill="#ffffff" rx="5" height="32.5" ry="5" stroke="none" atv:bindbr="1,1" id="username_input_input_bg" atv:refpx="124.19" stroke-width="0" atv:refpy="18.75" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <rect width="222" x="4" y="3.75" atv:bindtl="0,0" fill="none" rx="5" height="32.5" ry="5" stroke="none" atv:bindbr="1,1" id="username_input_blinking_frame" atv:refpx="124.19" stroke-width="0" atv:refpy="18.75" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <text x="221.5" y="24.25" atv:bindtl="1,0.5" fill="#647A8F" font-family="Open Sans" text-anchor="end" atv:bindbr="1,0.5" id="username_input_input_label" atv:refpx="171.91" atv:refpy="15.273" font-size="12" transform="matrix(0.6957,0,0,0.75,0,0)">Ein-/Ausgabeelement</text>
   </g>
   <atv:foreignObject width="160" x="0" y="0" height="30" id="username_input_clickareaFO">
    <div style="width:100%;height:100%;opacity:0;filter:alpha(opacity=0);background-color:red" id="username_input_div_clickarea" xmlns="http://www.w3.org/1999/xhtml"/>
   </atv:foreignObject>
  </svg>
 </g>
 <g transform="matrix(1.4375,0,0,1.3333,0,0)">
  <svg width="160" x="118.261" y="102.75" height="30" id="password_input" atv:refpx="285" atv:refpy="175">
   <defs/>
   <metadata/>
   <g id="password_input_input_element" atv:refpx="0" atv:refpy="0"/>
   <g id="password_input_svg_input" atv:refpx="80" atv:refpy="15">
    <rect width="229.5" x="0.25" y="0.25" atv:bindtl="0,0" fill="none" rx="5" height="39.5" ry="5" stroke="none" atv:bindbr="1,1" id="password_input_id_0" atv:refpx="80.25" stroke-width="0" atv:refpy="15.5" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <circle cx="285" cy="260" fill="#085ef8" id="id_10" r="89" stroke="#ed33c4" stroke-width="5"/>
    <rect width="224.5" x="2.75" y="2.75" atv:bindtl="0,0" fill="none)" rx="5" height="34.5" ry="5" stroke="none" atv:bindbr="1,1" id="password_input_id_2" atv:refpx="117.754" stroke-width="0" atv:refpy="-9.5" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <circle cx="361" cy="33" fill="#4edcfe" id="id_16" r="41" stroke="#794904" stroke-width="2"/>
    <rect width="222" x="4" y="3.75" atv:bindtl="0,0" fill="#ffffff" rx="5" height="32.5" ry="5" stroke="none" atv:bindbr="1,1" id="password_input_input_bg" atv:refpx="124.19" stroke-width="0" atv:refpy="18.75" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <rect width="222" x="4" y="3.75" atv:bindtl="0,0" fill="none" rx="5" height="32.5" ry="5" stroke="none" atv:bindbr="1,1" id="password_input_blinking_frame" atv:refpx="124.19" stroke-width="0" atv:refpy="18.75" transform="matrix(0.6957,0,0,0.75,0,0)"/>
    <text x="221.5" y="24.25" atv:bindtl="1,0.5" fill="#647A8F" font-family="Open Sans" text-anchor="end" atv:bindbr="1,0.5" id="password_input_input_label" atv:refpx="171.91" atv:refpy="15.273" font-size="12" transform="matrix(0.6957,0,0,0.75,0,0)">Ein-/Ausgabeelement</text>
    <ellipse cx="120" cy="224" fill="#6ce9d7" id="id_15" rx="102" ry="61" stroke="#3768df" stroke-width="2"/>
   </g>
   <atv:foreignObject width="160" x="0" y="0" height="30" id="password_input_clickareaFO">
    <div style="width:100%;height:100%;opacity:0;filter:alpha(opacity=0);background-color:red" id="password_input_div_clickarea" xmlns="http://www.w3.org/1999/xhtml"/>
   </atv:foreignObject>
  </svg>
 </g>
 <text x="34" y="101.5" fill="#647a8f" font-family="Arial" id="username_label" atv:refpx="79.5" atv:refpy="95.5" font-size="20">Benutzername</text>
 <line fill="#e45910" id="id_25" stroke="#c1d9c6" stroke-width="5" x1="295" x2="3" y1="81" y2="276"/>
 <text x="34" y="161.5" fill="#647a8f" font-family="Arial" id="password_label" atv:refpx="78.5" atv:refpy="155.5" font-size="20">Passwort</text>
 <g>
  <svg width="81.5" x="230" y="190" atv:dynamic="true" height="31.5" id="ok_button" atv:refpx="210" atv:refpy="235">
   <defs>
    <linearGradient id="2linear_12" y1="-0.0183441" x1="1" y2="1" gradientUnits="objectBoundingBox" x2="1">
     <stop offset="0" stop-color="#ffffff"/>
     <stop offset="1" stop-color="#ffffff"/>
    </linearGradient>
    <linearGradient id="2linear_0" y1="0.95625" x1="0.104404" y2="0.0895522" gradientUnits="objectBoundingBox" x2="0.104404">
     <stop offset="0" stop-color="#ffffff"/>
     <stop offset="1" stop-color="#ffffff"/>
    </linearGradient>
    <linearGradient id="2linear_1" y1="-0.0183441" x1="1" y2="1" gradientUnits="objectBoundingBox" x2="1">
     <stop offset="0" stop-color="#ffffff" stop-opacity="0.2745098039215687"/>
     <stop offset="0.5515695067264574" stop-color="#ffffff" stop-opacity="0"/>
    </linearGradient>
    <linearGradient id="2linear_2" y1="1" x1="1" y2="-0.0183441" gradientUnits="objectBoundingBox" x2="1">
     <stop offset="0" stop-color="#ffffff" stop-opacity="0.2745098039215687"/>
     <stop offset="0.5515695067264574" stop-color="#ffffff" stop-opacity="0"/>
    </linearGradient>
   </defs>
   <metadata/>
   <g atv:dynamic="true" id="ok_button_button_clickarea" atv:refpx="40.75" atv:refpy="15.75" transform="matrix(1,0,0,1,0.75,0.75)">
    <polygon fill="#a5fb53" id="id_11" points="309,62 401,22 259,193 290,121 152,213 328,258 210,48 248,233 334,135 199,54 9,229 248,128 22,168 " stroke="#0b265c" stroke-width="3"/>
    <rect width="79.5" x="0.25" y="0.25" atv:bindtl="0,0" fill="none" atv:dynamic="true" rx="5" height="29.5" ry="3" stroke="#647A8F" atv:bindbr="1,1" id="ok_button_id_0" atv:refpx="40.25" stroke-width="1" atv:refpy="16"/>
    <ellipse cx="15" cy="105" fill="#753dbc" id="id_7" rx="64" ry="43" stroke="#1f7fd4" stroke-width="3"/>
    <rect fill="#97bfcd" height="44" id="id_2" stroke="#3a7d3c" stroke-width="3" width="59" x="242" y="232"/>
    <rect width="74.5" x="2.75" y="2.75" atv:bindtl="0,0" fill="none" rx="2.811" height="24.5" ry="2.492" stroke="none" atv:bindbr="1,1" id="ok_button_id_2" atv:refpx="42.75" stroke-width="0.5" atv:refpy="-94"/>
    <rect width="72" x="4" y="4" atv:bindtl="0,0" fill="none" rx="2.717" height="22" ry="2.237" stroke="none" atv:bindbr="1,1" id="ok_button_button_bg" atv:refpx="44" stroke-width="0.5" atv:refpy="31"/>
    <polyline fill="#713224" id="id_33" points="127,116 401,75 411,118 415,176 58,232 245,67 34,234 96,65 128,52 347,255 365,254 281,46 358,18 210,138 " stroke="#af1fe6" stroke-width="1"/>
    <g>
     <svg width="20" x="30" y="5" atv:bindtl="0.5,0.5" visibility="hidden" height="20" atv:bindbr="0.5,0.5" id="ok_button_button_symbol" atv:refpx="130" atv:refpy="20">
      <defs id="ok_button_button_symbol_defs1373">
       <linearGradient id="3linearGradient2250">
        <stop offset="0" stop-color="#008700" stop-opacity="1"/>
        <stop offset="1" stop-color="#006f00" stop-opacity="1"/>
       </linearGradient>
      </defs>
      <metadata/>
      <polygon points="2.661,10.134 1.306,11.529 7.773,19.274 18.693,1.654 17.338,0.725 7.231,13.233" fill="#647A8F" stroke="none" id="ok_button_button_symbol_id_3" atv:refpx="10" stroke-width="1" atv:refpy="10"/>
      <line fill="#3f82a7" id="id_22" stroke="#fd169e" stroke-width="3" x1="115" x2="302" y1="173" y2="234"/>
     </svg>
    </g>
    <line fill="#2548aa" id="id_9" stroke="#8f5418" stroke-width="3" x1="260" x2="47" y1="170" y2="78"/>
    <text x="40" y="19.5" atv:bindtl="0.5,0.5" visibility="inherit" fill="#647A8F" font-family="Varela Round" text-anchor="middle" atv:bindbr="0.5,0.5" id="ok_button_button_label" atv:refpx="40" atv:refpy="14.5" font-size="12">OK</text>
    <rect fill="#75ec67" height="175" id="id_1" stroke="#802e35" stroke-width="4" width="84" x="299" y="7"/>
    <rect width="72" x="4" y="4" atv:bindtl="0,0" fill="none" rx="5" height="22" ry="2" stroke="none" atv:bindbr="1,1" id="ok_button_button_stroke" atv:refpx="44" stroke-width="1" atv:refpy="31"/>
    <line fill="#1ef527" id="id_5" stroke="#e2a79d" stroke-width="3" x1="185" x2="155" y1="96" y2="160"/>
   </g>
  </svg>
 </g>
 <line fill="#ae847e" id="id_24" stroke="#09cfa2" stroke-width="5" x1="171" x2="81" y1="11" y2="17"/>
 <polygon fill="#edc74a" id="id_23" points="58,250 104,187 427,163 384,133 89,118 427,57 420,166 33,207 356,239 242,225 367,160 262,61 " stroke="#8ddff1" stroke-width="1"/>
 <g>
  <svg width="81.5" x="330" y="190" atv:dynamic="true" height="31.5" id="cancel_button" atv:refpx="310" atv:refpy="235">
   <defs/>
   <metadata/>
   <g atv:dynamic="true" id="cancel_button_button_clickarea" atv:refpx="40.75" atv:refpy="15.75" transform="matrix(1,0,0,1,0.75,0.75)">
    <rect width="79.5" x="0.25" y="0.25" atv:bindtl="0,0" fill="none" atv:dynamic="true" rx="5" height="29.5" ry="3" stroke="#647A8F" atv:bindbr="1,1" id="cancel_button_id_0" atv:refpx="40.25" stroke-width="1" atv:refpy="16"/>
    <polygon fill="#1bfb8f" id="id_30" points="33,197 365,42 149,148 55,210 249,236 240,158 55,146 143,1 424,65 268,65 255,40 " stroke="#2c7414" stroke-width="3"/>
    <rect width="74.5" x="2.75" y="2.75" atv:bindtl="0,0" fill="none" rx="2.811" height="24.5" ry="2.492" stroke="none" atv:bindbr="1,1" id="cancel_button_id_2" atv:refpx="42.75" stroke-width="0.5" atv:refpy="-94"/>
    <polyline fill="#f7d153" id="id_26" points="85,75 309,4 80,91 94,59 314,149 117,188 222,174 423,125 184,137 235,67 246,247 " stroke="#98c0aa" stroke-width="5"/>
    <rect fill="#a99146" height="20" id="id_14" stroke="#5d6840" stroke-width="2" width="50" x="122" y="186"/>
    <rect width="72" x="4" y="4" atv:bindtl="0,0" fill="none" rx="2.717" height="22" ry="2.237" stroke="none" atv:bindbr="1,1" id="cancel_button_button_bg" atv:refpx="44" stroke-width="0.5" atv:refpy="31"/>
    <circle cx="113" cy="209" fill="#2c4f1b" id="id_21" r="142" stroke="#56f265" stroke-width="2"/>
    <g>
     <svg width="20" x="30" y="5" atv:bindtl="0.5,0.5" visibility="hidden" height="20" atv:bindbr="0.5,0.5" id="cancel_button_button_symbol" atv:refpx="130" atv:refpy="20">
      <defs id="cancel_button_button_symbol_defs1373"/>
      <metadata/>
      <polygon points="2.661,10.134 1.306,11.529 7.773,19.274 18.693,1.654 17.338,0.725 7.231,13.233" fill="#647A8F" stroke="none" id="cancel_button_button_symbol_id_3" atv:refpx="10" stroke-width="1" atv:refpy="10"/>
      <line fill="#dec90d" id="id_18" stroke="#4724e9" stroke-width="5" x1="22" x2="177" y1="21" y2="25"/>
     </svg>
    </g>
    <text x="40" y="19.5" atv:bindtl="0.5,0.5" visibility="inherit" fill="#647A8F" font-family="Varela Round" text-anchor="middle" atv:bindbr="0.5,0.5" id="cancel_button_button_label" atv:refpx="40" atv:refpy="14.5" font-size="12">Abbrechen</text>
    <rect width="72" x="4" y="4" atv:bindtl="0,0" fill="none" rx="5" height="22" ry="2" stroke="none" atv:bindbr="1,1" id="cancel_button_button_stroke" atv:refpx="44" stroke-width="1" atv:refpy="31"/>
    <line fill="#2df8ca" id="id_28" stroke="#251af6" stroke-width="1" x1="141" x2="158" y1="106" y2="124"/>
   </g>
  </svg>
 </g>
 <text x="114" y="42" fill="#647a8f" font-family="Varela Round" text-anchor="start" id="status_message" font-weight="bold" atv:refpx="229" atv:refpy="37.5" font-size="14">Bitte geben Sie Benutzernamen und Passwort ein.</text>
 <polygon fill="#11f4b4" id="id_6" points="163,185 207,247 36,214 364,274 153,97 53,212 324,172 112,262 86,172 213,109 410,133 242,255 " stroke="#1293d5" stroke-width="4"/>
 <g>
  <svg width="60" x="20" y="5" visibility="hidden" height="60" id="status_symbol" atv:refpx="59" atv:refpy="35">
   <defs/>
   <metadata/>
   <polyline fill="#7e3e90" id="id_12" points="283,199 168,278 374,46 252,33 102,78 94,121 280,55 66,257 88,113 25,164 " stroke="#bf40ca" stroke-width="5"/>
   <g id="status_symbol_status_symbol" atv:refpx="30" atv:refpy="29.998" transform="matrix(1.2067,0,0,1.2067,-21.1174,-238.3251)">
    <circle fill="none" cx="42.361" cy="222.361" stroke="#647A8F" r="22.361" id="status_symbol_id_2" atv:refpx="42.361" stroke-width="5" atv:refpy="422.361"/>
    <line stroke="#647A8F" id="status_symbol_id_3" y1="206.041" atv:refpx="42.361" x1="26.042" y2="238.68" stroke-width="5" atv:refpy="428.402" x2="58.681"/>
   </g>
  </svg>
 </g>
 <script xlink:href="../../webmi.js" type="text/ecmascript"/>
 <script type="text/ecmascript"><![CDATA[webMI.proxy({"":[function(webMI,window,document,self){var trigger_username = "com.atvise.login.username";
var trigger_password = "com.atvise.login.password";
var username = "";
var password = "";

webMI.addOnload(function(e) {
	webMI.trigger.fire("setValue", "", "username_input");
	webMI.trigger.fire("setValue", "", "password_input");
});

webMI.trigger.connect("valuechanged", function(e) {
	username = e.value;
}, "username_input");

webMI.trigger.connect("valuechanged", function(e) {
	password = e.value;
}, "password_input");

webMI.trigger.connect(trigger_password, function(e) {
	password = e.value;
	webMI.trigger.fire("setValue", e.value, "password_input");
});

webMI.trigger.connect(trigger_username, function(e) {
	username = e.value;
	webMI.trigger.fire("setValue", e.value, "username_input");
});

webMI.trigger.connect("clicked", function(e) {
	webMI.display.closeWindow();
}, "cancel_button");

webMI.trigger.connect("clicked", function(e) {
	webMI.data.login(username, password, function(e) {
		if (e[""].hasOwnProperty("username") && e[""].username){
			webMI.display.closeWindow();
		} else if (e[""].hasOwnProperty("username")) {
			webMI.gfx.setText("status_message", "Login fehlgeschlagen! Benutzername/Passwort falsch!");
			webMI.gfx.setVisible("status_symbol", null);
		} else if (e[""].hasOwnProperty("error")) {
			webMI.gfx.setText("status_message", "Login fehlgeschlagen! Benutzername/Passwort falsch!");
			webMI.gfx.setVisible("status_symbol", null);
		} else {
			webMI.display.closeWindow();
		}
	});
}, "ok_button");

webMI.trigger.connect("clicked", function(e) {
	webMI.query.trigger = trigger_username;
	webMI.query.password = "No";
	webMI.query.value = "";
	webMI.display.openWindow({display:"00000012",extern:false,height:250,menubar:false,modal:true,movable:true,resizable:false,scrollbars:false,status:false,title:"Tastatur",toolbar:false,width:550,query:webMI.query});
}, "username_keyboard");

webMI.trigger.connect("clicked", function(e) {
	webMI.query.trigger = trigger_password;
	webMI.query.password = "Yes";
	webMI.query.value = "";
	webMI.display.openWindow({display:"00000012",extern:false,height:250,menubar:false,modal:true,movable:true,resizable:false,scrollbars:false,status:false,title:"Tastatur",toolbar:false,width:550,query:webMI.query});
}, "password_keyboard");webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"status_message", "key":"FontFamily", "property":""});
},{"cancel_button":["2",{"label":{v:"Abbrechen"},"tabIndex":{v:"6"}}],"ok_button":["2",{"label":{v:"OK"},"tabIndex":{v:"5"}}],"password_input":["1",{"allowDirectInput":{v:"Yes"},"password":{v:"Yes"},"tabIndex":{v:"3"},"validation":{v:"String"}}],"status_symbol":["4",{}],"username_input":["1",{"allowDirectInput":{v:"Yes"},"tabIndex":{v:"1"},"validation":{v:"String"}}]},{}],"2":[function(webMI,window,document,self){var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var display = webMI.query["display"];
var consistencyGroup = webMI.query["consistencyGroup"];
var consistencyFunction = webMI.query["consistencyFunction"];

if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

function deActivate(forceDeActivate) {
	if (typeof forceDeActivate !== "undefined" && forceDeActivate){
		active = false;
	} else if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("button_bg", fillColor);
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("button_bg", fillColorInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		webMI.gfx.setStroke("button_stroke", strokeNormal);
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
	}
}
function applyTH(){
	if (active){
		webMI.trigger.fire("clicked", true, "");
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
}
function backTH(){}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release();
	} else if (keyTH == "apply"){
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick"){
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

webMI.addEvent("button_clickarea", "mousedown", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		if (active) {
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("button_stroke", strokePressed);
		}
	} (value);
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	} (value);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	} (value);
});

webMI.addEvent("button_clickarea", "click", function(e) {
	if (active){
		tabHandler.setCurrentIndex(keyHandler, function(){
			webMI.trigger.fire("clicked", true, "")
		});
		//webMI.trigger.fire("clicked", true, "");
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

webMI.trigger.connect("com.atvise.setActive",function(e){
	if (e.value){
		deActivate();
	}  else {
		deActivate(true);
	}
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}
},{"button_symbol":["3",{"symbolColor":{b:"symbolColor"}}]},{"consistencyFunction":"write","fillColor":"#FFFFFF","fillColorInactive":"#FFFFFF","focusStrokeColor":"#FFFFFF","fontColor":"#d0d0d0","fontFamily":"Arial","fontSize":"12","label":"Standard","strokePressed":"#ffffff","symbol":"00000010","symbolColor":"#647A8F","visibilityLabel":"inherit","visibilitySymbol":"hidden"}],"1":[function(webMI,window,document,self){var inputMode = webMI.query["validation"]; //implement if hasFeature html5 input types
var inputFO = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "input");
var isPasswordMode = (inputMode == "Password" || webMI.query["password"] == "Yes");
inputFO.type = isPasswordMode ? "password" : "text"; //implement e-mail when browsers support it
inputFO.id = "html_input";
inputFO.style.width = "100%";
inputFO.style.height = "100%";
inputFO.style.borderWidth = "0px";
inputFO.style.padding = "0px";
inputFO.style.textAlign = "right";
inputFO.style.color = webMI.query["fontColor"];
inputFO.style.fontFamily = webMI.query["fontFamily"];
inputFO.style.fontSize = parseFloat(webMI.query["fontSize"])*0.0820625+"em";
var foreignObject = null;
var createdForeignObject = false;
var data = {};
var security = {};
var initialized = false;
var value = null;
var nodeToSubscribe = (webMI.query["outputNode"] != "") ? webMI.query["outputNode"] : webMI.query["base"];
var decimalFraction = parseInt(webMI.query["decimalFraction"], 10);
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");
var consistencyGroup = webMI.query["consistencyGroup"];
var preventFirstConsistencyRead = true;
var storedEvent = {"keyCode": null, "shiftKey": false};
var backgroundColor = webMI.query["fill"];

webMI.addOnload(function(e) {
	var remaining = 8;
	data = {
		"min":			{"value":null, "address": webMI.query["nodeMin"], "paramValue": webMI.query["min"]},
		"max":			{"value":null, "address": webMI.query["nodeMax"], "paramValue": webMI.query["max"]},
		"limitLowLow":	{"value":null, "address": webMI.query["nodeLowLow"], "paramValue": webMI.query["limitLowLow"]},
		"limitLow":		{"value":null, "address": webMI.query["nodeLow"], "paramValue": webMI.query["limitLow"]},
		"limitHigh":	{"value":null, "address": webMI.query["nodeHigh"], "paramValue": webMI.query["limitHigh"]},
		"limitHighHigh":{"value":null, "address": webMI.query["nodeHighHigh"], "paramValue": webMI.query["limitHighHigh"]},
		"activeNode":	{"value":null, "address": webMI.query["activeNode"], "paramValue": ""},
		"activeValue":	{"value":null, "address": "", "paramValue": webMI.query["activeValue"]},
		"base":			{"value":null, "address": webMI.query["base"], "paramValue": ""}
	};

	function initVariables(value, address, id) {
		if(id == "base" && consistencyGroup != "" && address != "") {
			webMI.data.read(address, function(e) {
				data[id]["value"] = e.value;
			});
			consistencyHandler.register(consistencyGroup, address, handleInput);
			reduceRemaining();
		} else if (address != "") {
			webMI.data.subscribe(address, function(e) {
				data[id]["value"] = e.value;
				reduceRemaining();
			});
		} else if (!isNaN(parseFloat(value))) {
			data[id]["value"] = parseFloat(value);
			reduceRemaining();
		} else if (typeof value == "string" && value != "off") {
			data[id]["value"] = value;
			reduceRemaining();
		} else
			reduceRemaining();

		function reduceRemaining() {
			if(!initialized)
				initialized = (--remaining == 0);
			else
				handleInput();
		}
	}

	for(var i in data)
		initVariables(data[i]["paramValue"], data[i]["address"], i);

	var doc = document.getElementById("svg_input").ownerDocument;
	tabHandler.register(webMI.query["tabIndex"],keyHandler,doc);

	if (webMI.query["tooltip"] != undefined)
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"clickareaFO", "text":webMI.query["tooltip"]});
});

function setColorization() {
	function setBackground(color) {
		webMI.gfx.setFill("input_bg", color);
		inputFO.style.backgroundColor = color;
	}

	if(data["limitLowLow"]["value"] != null && value <= data["limitLowLow"]["value"])
		setBackground(webMI.query["limitLowLowFill"]);
	else if(data["limitLow"]["value"] != null && value <= data["limitLow"]["value"])
		setBackground(webMI.query["limitLowFill"]);
	else if(data["limitHighHigh"]["value"] != null && value >= data["limitHighHigh"]["value"])
		setBackground(webMI.query["limitHighHighFill"]);
	else if(data["limitHigh"]["value"] != null && value >= data["limitHigh"]["value"])
		setBackground(webMI.query["limitHighFill"]);
	else if(!security["hasRight"] || !security["activateInput"] || !security["activated"])
		setBackground(webMI.query["fillColorInactive"]);
	else if(security["outputModeOnly"])
		setBackground(webMI.query["fillNotEditable"]);
	else
		setBackground(webMI.query["fill"]);
}

function handleInput(consistencyValue){
	//preventing first ConsistencyRead, as it would call handleInput without a consistencyValue
	if(consistencyGroup != "" && preventFirstConsistencyRead) {
		preventFirstConsistencyRead = false;
		return;
	}

	if(consistencyValue && consistencyGroup != "")
		consistencyHandler.set(consistencyGroup, data["base"]["address"], consistencyValue); //does not support alternative node

	value = (consistencyValue == undefined) ? data["base"]["value"] : consistencyValue;

	webMI.trigger.fire("valuechanged", (value == null) ? "" : value, "");

	var formattedOutput = null;
	var enumList = webMI.query["enumList"];

	if (isPasswordMode)
		formattedOutput = "*** Passwort ***";
	else if(enumList != "") {
		formattedOutput = (enumList[value] != undefined) ? enumList[value].value : value + " not in enum list";
		value = (enumList[value] != undefined) ? enumList[value].value : value;
	} else if(inputMode == "Number") {
		var leadingZeros = parseInt(webMI.query["leadingZeros"], 10);
		var postDecimal = parseInt(webMI.query["postDecimal"], 10);
		var sign = webMI.query["sign"] == "true";
		var unit = webMI.query["unit"];
		var fieldWidth = 0;
		formattedOutput = (value != null) ? value : "";

		if(!isNaN(decimalFraction) && decimalFraction > 0)
			formattedOutput = formattedOutput / Math.pow(10, decimalFraction);

		if(!isNaN(leadingZeros) && leadingZeros > 0)
			fieldWidth += leadingZeros;

		if(!isNaN(postDecimal) && postDecimal > 0) {
			if(postDecimal > 9)
				postDecimal = 9;
			fieldWidth += (postDecimal + 1);
		}

		if(!isNaN(leadingZeros) && !isNaN(postDecimal)) {
			var formatString = ((sign) ? "%+" : "%") + "0" + fieldWidth + "." + postDecimal + "f";
			formattedOutput = webMI.sprintf(formatString, formattedOutput);
		}

		value = formattedOutput;

		if(unit != undefined)
			formattedOutput = formattedOutput + " " + unit;
	}

	webMI.gfx.setText("input_label", (formattedOutput != null) ? formattedOutput : value);

	security = {
		"outputModeOnly": (webMI.query["editable"] == "No"),
		"activateInput": (data["activeValue"]["value"] == null || data["activeNode"]["value"] == null) || data["activeValue"]["value"] == String(data["activeNode"]["value"]),
		"hasRight": true,
		"activated": (typeof security["activated"] === "boolean") ? security["activated"] : true
	};

	var requiredRight = webMI.query["right"];

	if (requiredRight != "") {
		if (requiredRight.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1)
			requiredRight = requiredRight.substring(23,requiredRight.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.

		webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
			security["hasRight"] = webMI.hasRight(requiredRight);
			if(!security["hasRight"])
				switchToOutputMode();
			setColorization();
		});
	}

	if(!security["activateInput"])
		switchToOutputMode();

	//workaround until apple Bug ID 12900899 has been solved and the foreignobject clickarea is no longer required
	if(security["outputModeOnly"])
		webMI.gfx.setVisible("clickareaFO", false);

	if(inputMode == "Number")
		value = parseFloat(value);

	setColorization();
}

function switchToOutputMode() {
	webMI.gfx.setVisible("svg_input", null);
	webMI.gfx.setVisible(foreignObject, false);
}

function switchToInputMode(){
	if(security["hasRight"] && !security["outputModeOnly"] && security["activateInput"] && security["activated"]) {

		var directKeyboardMode = webMI.query["allowDirectInput"] == "Yes";
		var useSVGKeyboard = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Configuration", {"action":"existsIndexParameter", "parameterName":"useSVGKeyboard"});
		if(useSVGKeyboard == "true")
			directKeyboardMode = false;

		function setFocus() {
			inputFO.focus();
			if(webMI.query["selectTextOnFocus"] == "true")
				inputFO.select();
		}

		if(directKeyboardMode) {
			tabHandler.setAcceptKeys(false);
			inputFO.value = value;
			webMI.gfx.setVisible("svg_input", false);
			if(!createdForeignObject) {
				var textboxGroup = document.getElementById("input_element");
				foreignObject = webMI.gfx.addForeignObject({x:0, y:0, width:160, height:30, id:"input_fo", childNodes: [inputFO]}, textboxGroup);
				foreignObject.style.border = "black 2px solid";
				createdForeignObject = true;
				setFocus();
			 } else {
				webMI.gfx.setVisible(foreignObject, null);
				setFocus();
			}
		} else { //SVG Mode
			function getDisplayParameters(){
				var communicationID = new Date().getTime().toString();
				webMI.trigger.connect(communicationID, function(e) {
					checkInput(e.value);
				});

				var passObj = {};
				for (var i in webMI.query)
					passObj[i] = webMI.query[i];
				passObj["minValue"] = data["min"]["value"];
				passObj["maxValue"] = data["max"]["value"];
				if (nodeToSubscribe != "" && consistencyGroup == "")
					passObj["target"] = nodeToSubscribe;
				if (nodeToSubscribe == "" || consistencyGroup != "")
					passObj["trigger"] = communicationID;
				if (isPasswordMode)
					passObj["password"] = "Yes";
				return passObj;
			}

			var keyboard = null;
			var size = (inputMode != undefined && inputMode == "Number") ? {w: 438, h: 378} : {w: 550, h: 250};

			if (inputMode != undefined && inputMode == "Number")
				keyboard = "00000011";
			else
				keyboard = "00000012";

			var keyboardParam = getDisplayParameters();
			webMI.display.openWindow({display:keyboard,extern:false,height:size.h,menubar:false,modal:true,movable:true,resizable:false,scrollbars:false,status:false,title:"Tastatur",toolbar:false,width:size.w,query:keyboardParam});
		}
	}
}

function keyHandler(keyTH,param2){
	if (keyTH == "focus")
		webMI.gfx.setStroke("input_bg", webMI.query["focusStrokeColor"]);
	else if (keyTH == "blur")
		webMI.gfx.setStroke("input_bg", "none");
	else if (keyTH == "apply")
		switchToInputMode();
	else if (keyTH == "isActive")
		return (security["hasRight"] && !security["outputModeOnly"] && security["activateInput"] && security["activated"] && param2(document.getElementById("svg_input").parentNode));
}

webMI.addEvent("clickareaFO", "click", function(e) {
	tabHandler.setCurrentIndex(keyHandler);
	switchToInputMode();
});

function stopPropagation(event) {
	/*
	 * If the ALT key is pressed together with one or more other keys on
	 * Firefox (only Windows), there will be no keyup event when the ALT
	 * key gets released. Since the ALT key is being used for paning in
	 * atvise visualization, we have to make sure that key listeners in the
	 * global document do not get triggered if someone is currently entering
	 * something in the inputFO (like "someone@example.com").
	**/
	if (event.altKey){
		if (event.stopPropagation)
			event.stopPropagation();
		else
			event.cancelBubble = true;
	}
}

webMI.addEvent(inputFO, "keyup", stopPropagation);
webMI.addEvent(inputFO, "keydown", function(e) {
	var keyCode = e.keyCode;
	if (/MSIE/.test(navigator.userAgent)){
		storedEvent["keyCode"] = e.keyCode;
		storedEvent["shiftKey"] = e.shiftKey;
	}
	if(keyCode == "13" || keyCode == "9") {
		inputFO.blur();
		if (keyCode == "13") tabHandler.setAcceptKeysPrevent(true);
	} else if(keyCode == "27"){
		storedEvent["keyCode"] = "27";
		tabHandler.setAcceptKeysPrevent(true);
		inputFO.blur();
	}

	stopPropagation(e);
});

inputFO.onblur = function() {
	switchToOutputMode();
	tabHandler.setAcceptKeys(true);

	if (storedEvent["keyCode"] != null){
		if (storedEvent["shiftKey"] && storedEvent["keyCode"] == "9")
			tabHandler.prevTab();
		else if (storedEvent["keyCode"] == "9")
			tabHandler.nextTab();
	}

	if (storedEvent["keyCode"] != "27"){
		//workaround: setTimeout for Chrome crash error (clicking out from the input field or clicking enter while holding a button pressed).
		setTimeout(function(){
			checkInput(inputFO.value);
		},0);
	}

	storedEvent["keyCode"] = null;
};

function checkInput(tempValue) {
	var tempValue = String(tempValue);
	var regexps = { "Boolean":"(true|false|0|1)", "Number":"[+-]*[0-9]+(\.[0-9]+)?", "String":".*", "Password":".*" };
	if(new RegExp("^"+regexps[inputMode]+"$", "i").test(tempValue)) {
		if(inputMode == "Boolean")
			tempValue = (tempValue.toLowerCase() == "true" || tempValue == "1") ? true : false;
		else if(inputMode == "Number")
			tempValue = tempValue = parseFloat(tempValue.replace(",","."));
	} else {
		console.warn("Please enter a valid format according to the selected input mode.");
		return;
	}

	if(inputMode == "Number") {
		if(data["min"]["value"] != null && tempValue < data["min"]["value"]) {
			alert("Wert zu niedrig");
			return;
		} else if(data["max"]["value"] != null && tempValue > data["max"]["value"]) {
			alert("Wert zu hoch");
			return;
		}

		if(!isNaN(decimalFraction) && decimalFraction > 0)
			tempValue = tempValue * Math.pow(10, decimalFraction);

		writeValue(tempValue);
	} else if(inputMode == "String" || inputMode == "Boolean" || inputMode == "Password")
		writeValue(tempValue);

	function writeValue(tempValue) {
		if(consistencyGroup == "" && nodeToSubscribe != ""){
			webMI.data.write(nodeToSubscribe, tempValue);
			webMI.trigger.fire("com.atvise.outputvaluechanged", tempValue, "");
		} else
			handleInput(tempValue);

	}
}

webMI.trigger.connect("setValue", function(e) {
	checkInput(e.value);
});

webMI.trigger.connect("com.atvise.setActive",function(e){
	security["activated"] = e.value;

	setColorization();
	switchToOutputMode();
});

webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		webMI.gfx.setStroke("blinking_frame", e.value);
		webMI.gfx.setVisible("blinking_frame", null);
	} else {
		webMI.gfx.setStroke("blinking_frame", e.value);
		webMI.gfx.setVisible("blinking_frame",{0:true,2:false,4:true,6:false,8:true,10:false});
	}
});

webMI.trigger.connect("com.atvise.setBackground", function(e){
	backgroundColor = (e.value == "") ? webMI.query["fill"] : e.value;
	setColorization();
});
},{},{"activeNode":"","activeValue":"off","allowDirectInput":"Yes","base":"","consistencyGroup":"","decimalFraction":"","editable":"Yes","enumList":"","fill":"#ffffff","fillColorInactive":"#ffffff","fillNotEditable":"#ffffff","focusStrokeColor":"#ffffff","fontColor":"#647A8F","fontFamily":"Open Sans","fontSize":"12","leadingZeros":"0","limitHigh":"off","limitHighFill":"#ffffff","limitHighHigh":"off","limitHighHighFill":"#ffffff","limitLow":"off","limitLowFill":"#ffffff","limitLowLow":"off","limitLowLowFill":"#ffffff","max":"off","min":"off","nodeHigh":"","nodeHighHigh":"","nodeLow":"","nodeLowLow":"","nodeMax":"","nodeMin":"","outputNode":"","password":"No","postDecimal":"0","right":"","selectTextOnFocus":"false","sign":"false","tabIndex":"","validation":"Number"}],"4":[function(webMI,window,document,self){},{},{}],"3":[function(webMI,window,document,self){},{},{"symbolColor":"#000000"}]},window);]]></script>
</svg>
