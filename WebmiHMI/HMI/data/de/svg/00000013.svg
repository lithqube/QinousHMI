<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="964" version="1.2" height="600" visibility="hidden" atv:oe="2BD6F3BA9386L2KEE9ICI6H8M7O4P31F365AECD499I181IBLDHCP3HBN5KFQDC83" xmlns="http://www.w3.org/2000/svg">
 <defs/>
 <metadata/>
 <ellipse cx="102" cy="594" fill="#151fbd" id="id_33" rx="338" ry="188" stroke="#e87a68" stroke-width="1"/>
 <g id="tab_active" atv:refpx="184.242" atv:refpy="35.882" transform="matrix(0.9207,0,0,0.9207,-111.5829,-10.0846)">
  <rect width="120" x="175.5" y="35.5" fill="#4A5055" rx="3.069" ry="3.136" height="34.5" id="box_active" atv:refpx="259.312" stroke-width="1" atv:refpy="52.485"/>
  <polygon fill="#face9e" id="id_20" points="295,591 679,563 963,11 785,105 610,499 " stroke="#192ae4" stroke-width="5"/>
  <circle cx="235" cy="323" fill="#8a540a" id="id_26" r="350" stroke="#ac2513" stroke-width="2"/>
  <line fill="#5b6a71" id="id_24" stroke="#ca5c9a" stroke-width="3" x1="336" x2="416" y1="241" y2="258"/>
  <text x="184.5" y="58" fill="#ffffff" font-family="Varela Round" id="txt_active" atv:refpx="184.996" atv:refpy="53.5" font-size="16" transform="matrix(0.988,0,0,1,2.16,0)">Aktiv</text>
  <line fill="#3dbe92" id="id_23" stroke="#9b7ab6" stroke-width="2" x1="397" x2="370" y1="492" y2="392"/>
  <ellipse cx="206" cy="371" fill="#b3d862" id="id_15" rx="411" ry="32" stroke="#71c84a" stroke-width="4"/>
  <rect fill="#364930" height="107" id="id_9" stroke="#cd89c8" stroke-width="3" width="538" x="337" y="293"/>
 </g>
 <line fill="#3e9362" id="id_27" stroke="#663c32" stroke-width="5" x1="707" x2="917" y1="190" y2="202"/>
 <g id="tab_history" atv:refpx="304.241" atv:refpy="35.882" transform="matrix(0.9207,0,0,0.9207,-106.6704,-10.0846)">
  <circle cx="334" cy="491" fill="#205b1c" id="id_31" r="212" stroke="#8a7642" stroke-width="2"/>
  <polygon fill="#c8837b" id="id_16" points="488,304 58,53 111,343 480,423 62,312 667,149 269,103 " stroke="#48efe9" stroke-width="3"/>
  <rect fill="#8227d3" height="304" id="id_7" stroke="#f5c738" stroke-width="4" width="458" x="110" y="76"/>
  <rect width="120" x="300.5" y="35.5" fill="#ffffff" rx="2.671" ry="3.136" height="34.5" id="box_history" atv:refpx="360.5" stroke-width="1" atv:refpy="52.75"/>
  <ellipse cx="4" cy="513" fill="#18ebf8" id="id_5" rx="52" ry="135" stroke="#20ba48" stroke-width="2"/>
  <circle cx="909" cy="538" fill="#49444c" id="id_4" r="330" stroke="#a5cbb1" stroke-width="1"/>
  <rect fill="#b02d17" height="182" id="id_2" stroke="#779d55" stroke-width="4" width="0" x="962" y="290"/>
  <text x="309.506" y="58.5" fill="#dbdcdd" font-family="Varela Round" id="txt_history" atv:refpx="310.521" atv:refpy="54" font-size="16" transform="matrix(0.988,0,0,1,3.6601,0)">History</text>
  <polygon fill="#172a48" id="id_12" points="287,153 388,597 163,499 216,252 800,159 477,278 561,97 277,156 282,400 896,307 " stroke="#821ded" stroke-width="2"/>
 </g>
 <line fill="#1fb546" id="id_32" stroke="#3d8967" stroke-width="3" x1="963" x2="781" y1="130" y2="471"/>
 <rect fill="#72136d" height="257" id="id_29" stroke="#c01f50" stroke-width="1" width="131" x="739" y="97"/>
 <g transform="matrix(0.9207,0,0,0.9207,0,0)">
  <svg width="780" x="54.307" y="57.131" height="570" id="id_1" atv:refpx="489.072" atv:refpy="335.416">
   <defs/>
   <metadata/>
   <circle cx="811" cy="260" fill="#a40424" id="id_28" r="142" stroke="#9af3d1" stroke-width="5"/>
   <circle cx="262" cy="241" fill="#8c3da9" id="id_10" r="223" stroke="#d863da" stroke-width="1"/>
   <g atv:table-height="600" id="id_1_grid" atv:refpx="390.622" atv:table-width="800" atv:refpy="289.251">
    <ellipse cx="850" cy="284" fill="#77558c" id="id_30" rx="275" ry="282" stroke="#bba8dc" stroke-width="1"/>
    <circle cx="377" cy="469" fill="#5554c5" id="id_25" r="55" stroke="#d46d7b" stroke-width="4"/>
    <rect width="780" fll="#647A8F" height="570" id="id_1_rect1" atv:refpx="400" atv:refpy="300"/>
    <polyline fill="#feba9a" id="id_22" points="445,502 234,240 398,588 223,327 777,38 860,452 633,412 207,278 501,576 355,197 " stroke="#80166c" stroke-width="5"/>
    <circle cx="508" cy="232" fill="#50bdaa" id="id_3" r="122" stroke="#843985" stroke-width="3"/>
   </g>
  </svg>
 </g>
 <script xlink:href="../../webmi.js" type="text/ecmascript"/>
 <script xlink:href="/q/TableFunctions.js" type="text/ecmascript"/>
 <script xlink:href="/q/AlarmInfo.js" type="text/ecmascript"/>
 <script xlink:href="/q/StdConstantsFunctions.js" type="text/ecmascript"/>
 <script xlink:href="/scope.js" type="text/ecmascript"/>
 <script type="text/ecmascript"><![CDATA[webMI.proxy({"":[function(webMI,window,document,self){var boxActive = document.getElementById("box_active");
	txtActive = document.getElementById("txt_active");
	boxHistory = document.getElementById("box_history");
	txtHistory = document.getElementById("txt_history");

webMI.addEvent("tab_active", ["mouseover","touchstart"], function(e){
	document.getElementById("tab_active").setAttribute('style', "cursor: pointer;");		
});


// Microinteractions
webMI.addEvent("tab_active", ["click","touchend"], function(e) {
setActive();
});

webMI.addEvent("tab_history", ["click","touchend"], function(e) {
setHistoy();
});

function setActive(){
			boxActive.setAttribute("fill","#4A5055");
			txtActive.setAttribute("fill","#FFFFFF");
			boxHistory.setAttribute("fill","#FAFAFA");		
			txtHistory.setAttribute("fill","#E3E5E5");
}	

function setHistoy(){
			boxHistory.setAttribute("fill","#4A5055");		
			txtActive.setAttribute("fill","#E3E5E5");
			boxActive.setAttribute("fill","#FAFAFA");
			txtHistory.setAttribute("fill","#FFFFFF");
}

webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"txt_history", "key":"FontFamily", "property":""});

webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"txt_active", "key":"FontFamily", "property":""});
},{"id_1":["1",{}]},{}],"1":[function(webMI,window,document,self){var $ = top.$;
var headers = [];
var linefill = "#FFFFFF";
var nodearray = [];
var atviseTable;
var alarmList;

var earliestIndex;

// setup blank table
atviseTable = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Table", { "gElement": document.getElementById("grid"), "sortedByColumn":0, "autoResize":false});

atviseTable.setConfiguration({rowHeight:35,sortingUp:true,autoResize:true, drawStatusBar:false});
headers.push({name: "Owner", width: 200, fontSize: fontSize});
headers.push({name: "Level", width: 100, fontSize: fontSize});
headers.push({name: "Name", width: 500, fontSize: fontSize});

atviseTable.setHeaders(headers);


// - - - - - - - - - - - -

webMI.addOnload(function(f){
	webMI.trigger.fire("GetAlarmsFromCurrentNode");		
});// END For

// - - - - - - - - - - - -


webMI.trigger.connect("UpdateAlarmsFromCurrentNode", function(e){

	activeAlarmList = e.value[0];
	var alarmHistoryInfo = e.value[1];

//	console.log("Got an alarm history information structure ", alarmHistoryInfo);

	//======= ACTIVE ALARMS TAB==========
	for (var i=0; i<activeAlarmList.length; i++) {	

		var datarow = [];
		datarow[0] = {text: activeAlarmList[i].owner, fill:linefill};//, eventList: eventList};
		datarow[1] = {text: getAlarmLevelString(activeAlarmList[i].level), fill:linefill};
		datarow[2] = {text: activeAlarmList[i].name, fill:linefill};
		nodearray[i] = datarow;	

	}
	atviseTable.setDataProvider({data: nodearray});

	var alarmWordHistory = [];

	//========= ALARM HISTORY TAB=======
	if (alarmHistoryInfo.length > 0){


		for (var i=0; i< alarmHistoryInfo.length; i++){

//			console.log("Getting recorder contents ", alarmHistoryInfo[i]);
			// get TOC for this recorder		
			Scope.getContent(
				alarmHistoryInfo[i].recorder, 
				tocCallback(alarmHistoryInfo[i], alarmWordHistory));
		}
	}
});


tocCallback = function(alarmHistoryInfo, alarmWordHistory){

	return function(e){

		if (e === undefined) {
//			console.log("No such recorder methinks");
			return;
		}
		var toc = e
		var newestIndex = 0;
			
		for (var i=0; i<toc.length; i++){					
			var newestIndex = Math.max(newestIndex, toc[i].idxstart);
		}

		// request most recent lines from DB for alarmHistoryInfo[i].recorder, alarmHistoryInfo[i].alarmList. callback using alarmHistoryInfo[i].alarmMasksList
		Scope.readIndex(
			alarmHistoryInfo.recorder, 
			alarmHistoryInfo.alarms, 
			newestIndex, 
			newestIndex + 10000, 
			false, 
			addScopeResultsToAlarmHistoryCallback(alarmHistoryInfo, alarmWordHistory));

	}
}
},{},{}]},window);]]></script>
</svg>
