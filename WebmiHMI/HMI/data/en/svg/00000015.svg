<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="964" version="1.2" height="339" visibility="hidden" atv:oe="2BC6E3AA8376L2KEE9ICI6H8M7O4P31F365AECD499I181IBLDHCP3HBN5KFQDC83" xmlns="http://www.w3.org/2000/svg">
 <defs/>
 <metadata/>
 <polygon fill="#2b37cd" id="id_30" points="480,9 528,92 960,89 808,72 113,114 21,301 " stroke="#fc6571" stroke-width="5"/>
 <rect width="315" x="635" y="5" fill="#4a5055" rx="5.833" ry="5.337" height="58.707" stroke="none" stroke-linejoin="round" id="box_performance" atv:refpx="779.138" stroke-width="1.988" atv:refpy="35.242"/>
 <polygon fill="#310b16" id="id_27" points="285,266 743,0 353,215 815,183 303,207 921,88 676,190 601,157 770,273 " stroke="#49b857" stroke-width="4"/>
 <rect fill="#4146d8" height="23" id="id_4" stroke="#33c206" stroke-width="5" width="4" x="801" y="292"/>
 <text x="739.825" y="25.709" fill="#ffffff" font-family="Varela Round" id="performance" atv:refpx="740.762" atv:refpy="19.902" font-size="16" transform="matrix(0.9581,0,0,0.9032,30.8101,0.7462)">Performance</text>
 <rect fill="#ced05f" height="35" id="id_21" stroke="#597fb1" stroke-width="3" width="424" x="535" y="166"/>
 <g atv:table-height="335" id="monitoring" atv:refpx="2042.309" atv:table-width="295" atv:refpy="262.494" transform="matrix(1,0,0,1,635,52)">
  <line fill="#b0cda0" id="id_29" stroke="#f42f12" stroke-width="4" x1="181" x2="898" y1="106" y2="118"/>
  <rect width="315" fll="#647A8F" x="0" y="3" height="280" id="id_6" atv:refpx="400" atv:refpy="300"/>
  <polygon fill="#6441eb" id="id_19" points="67,155 399,165 699,203 921,299 883,65 731,63 277,180 903,294 22,327 96,238 281,197 758,38 600,206 31,122 " stroke="#dae5a9" stroke-width="5"/>
  <line fill="#39d61d" id="id_5" stroke="#4026f8" stroke-width="5" x1="815" x2="355" y1="166" y2="200"/>
 </g>
 <circle cx="587" cy="69" fill="#0b01b7" id="id_24" r="74" stroke="#dcc7af" stroke-width="2"/>
 <rect width="175" x="260" y="5" fill="#ffffff" rx="4.475" ry="5" height="55" stroke="none" id="box_manual" atv:refpx="342.79" stroke-width="1.988" atv:refpy="44.679"/>
 <line fill="#c7b2c2" id="id_9" stroke="#52a2fe" stroke-width="1" x1="122" x2="140" y1="86" y2="113"/>
 <g transform="matrix(0.3119,0,0,0.294,0,0)">
  <svg width="273" x="344.423" y="16.425" height="93" id="toogleSwitch" atv:refpx="92.424" atv:refpy="27.199">
   <defs/>
   <metadata/>
   <rect width="260" x="6.75" y="11" visibility="hidden" fill="#647a8f" rx="22.608" height="70" stroke="none" id="toogleSwitch_bckgrnd" atv:refpx="135.5" stroke-width="2" atv:refpy="45"/>
   <line fill="#2e2ba2" id="id_33" stroke="#926075" stroke-width="2" x1="648" x2="548" y1="67" y2="113"/>
   <polygon fill="#2cb088" id="id_31" points="248,91 385,218 729,93 862,3 154,316 487,122 391,142 29,50 " stroke="#e3740f" stroke-width="5"/>
   <polyline fill="#3124f3" id="id_25" points="452,140 686,180 210,70 732,4 834,39 507,109 718,191 416,278 119,283 401,303 905,157 636,24 382,45 " stroke="#9a2652" stroke-width="2"/>
   <text x="50.5" y="61" visibility="hidden" fill="#647A8F" font-family="Varela Round" id="toogleSwitch_not_allowed" atv:refpx="76.839" atv:refpy="55" font-size="35">BLOCKED</text>
   <line fill="#6d1fc6" id="id_18" stroke="#2227f5" stroke-width="3" x1="335" x2="504" y1="4" y2="171"/>
   <line fill="#3295b8" id="id_15" stroke="#25cf2f" stroke-width="1" x1="248" x2="439" y1="249" y2="27"/>
   <circle visibility="hidden" fill="#ffffff" cx="46.5" cy="46.5" stroke="#647a8f" r="45" id="toogleSwitch_click_off" atv:refpx="45.25" stroke-width="1.5" atv:refpy="45.5"/>
   <rect fill="#bbb5e9" height="128" id="id_13" stroke="#1ca268" stroke-width="2" width="237" x="631" y="183"/>
   <circle visibility="hidden" fill="#ffffff" cx="226.5" cy="46.5" stroke="#BEC7D0" r="45" id="toogleSwitch_click_on" atv:refpx="225.25" stroke-width="1.5" atv:refpy="45.5"/>
   <polyline fill="#73e7ce" id="id_22" points="213,168 348,85 622,185 244,338 908,125 127,32 217,202 439,127 524,163 381,331 551,37 39,97 " stroke="#faee74" stroke-width="4"/>
   <text x="105" y="61" visibility="hidden" fill="#ffffff" font-family="Varela Round" id="toogleSwitch_text_off" atv:refpx="146.154" atv:refpy="56.5" font-size="35">LOCAL</text>
   <polyline fill="#31b8a5" id="id_26" points="193,49 509,145 614,267 326,127 39,273 874,239 654,185 " stroke="#7f25b7" stroke-width="1"/>
   <text x="14" y="61" visibility="hidden" fill="#647A8F" font-family="Varela Round" id="toogleSwitch_text_on" atv:refpx="54.339" atv:refpy="51.5" font-size="35">REMOTE</text>
   <circle cx="359" cy="270" fill="#a15fe5" id="id_14" r="155" stroke="#6f8da5" stroke-width="2"/>
  </svg>
 </g>
 <line fill="#9f7f25" id="id_16" stroke="#1221d1" stroke-width="3" x1="308" x2="889" y1="181" y2="181"/>
 <text x="325.631" y="25.709" fill="#8b98a5" font-family="Varela Round" id="title_manual" atv:refpx="323.546" atv:refpy="22.709" font-size="16" transform="matrix(0.9581,0,0,0.9032,13.4764,0.7462)">Direct</text>
 <polygon fill="#45eb91" id="id_8" points="152,97 339,75 769,148 940,153 149,238 76,63 45,108 109,76 " stroke="#9ecabc" stroke-width="3"/>
 <ellipse cx="496" cy="74" fill="#fadc62" id="id_1" rx="90" ry="7" stroke="#2be3b4" stroke-width="4"/>
 <polyline fill="#fe00fc" id="id_23" points="424,268 161,176 335,318 479,308 352,88 432,191 212,266 246,105 " stroke="#9a718b" stroke-width="2"/>
 <rect width="180" x="440" y="5" fill="#ffffff" rx="4.006" ry="5" height="55" stroke="none" id="box_remote" atv:refpx="529.064" stroke-width="1.988" atv:refpy="44.679"/>
 <line fill="#435d66" id="id_2" stroke="#be4611" stroke-width="3" x1="382" x2="917" y1="170" y2="131"/>
 <g atv:table-height="260" id="commands" atv:refpx="310.829" atv:table-width="640" atv:refpy="236.333" transform="matrix(1,0,0,1,20,55)">
  <rect width="600" fll="#647A8F" x="0" y="0" height="280" id="rect1" atv:refpx="400" atv:refpy="300"/>
 </g>
 <polygon fill="#e83e53" id="id_28" points="901,120 385,326 203,75 904,210 706,268 316,321 157,169 940,97 890,177 248,243 355,0 904,274 396,33 " stroke="#a911f3" stroke-width="2"/>
 <circle cx="362" cy="94" fill="#cb58e8" id="id_20" r="179" stroke="#298af5" stroke-width="5"/>
 <g id="dropdown_remote" atv:refpx="530" atv:refpy="20.128">
  <rect width="108.637" x="473.786" y="10" fill="none" rx="6.035" ry="4.88" height="18.59" stroke="#8b98a5" id="bckgrnd_dropdown" atv:refpx="-30.169" stroke-width="1.405" atv:refpy="53.453"/>
  <polyline fill="#6d7654" id="id_17" points="415,112 742,138 86,225 838,84 130,193 814,90 " stroke="#70e1f9" stroke-width="1"/>
  <text x="478.525" y="26.515" fill="#8b98a5" font-family="Varela Round" id="txt_dropdown" atv:refpx="47.614" atv:refpy="24.601" font-size="16" transform="matrix(1.0267,0,0,0.8602,-12.6652,1.1904)">Command</text>
  <line fill="#f4d448" id="id_32" stroke="#57dbd0" stroke-width="3" x1="116" x2="380" y1="329" y2="214"/>
  <polyline atv:bindtl="1,1" points="580.772,16.589 564.55,16.589 572.659,23.385 580.772,16.589" fill="#8b98a5" stroke="none" atv:bindbr="1,1" id="icon_dropdown" atv:refpx="81.772" stroke-width="0" atv:refpy="95.028"/>
  <polygon fill="#a4fb30" id="id_10" points="880,142 661,253 272,8 526,190 396,172 136,309 198,230 101,52 " stroke="#edc07b" stroke-width="3"/>
 </g>
 <script xlink:href="../../webmi.js" type="text/ecmascript"/>
 <script xlink:href="/js/jquery.min.js" type="text/ecmascript"/>
 <script xlink:href="/q/TableFunctions.js" type="text/ecmascript"/>
 <script xlink:href="/q/StdConstantsFunctions.js" type="text/ecmascript"/>
 <script xlink:href="/q/ControlDatasets.js" type="text/ecmascript"/>
 <script type="text/ecmascript"><![CDATA[webMI.proxy({"":[function(webMI,window,document,self){var $ = top.$;
var commandHeaders = [];
var monitoringHeaders = [];

var	RowHeight = 30,
	linefill = "#FFFFFF",
	columnfill = "#FFFFFF"; 
var remoteCommand = document.getElementById("dropdown_remote"),
	boxManual = document.getElementById("box_manual"),
	boxRemote = document.getElementById("box_remote"),
	titleManual = document.getElementById("title_manual"),

	textDropdown = document.getElementById("txt_dropdown"),
	bckgrndDropdown = document.getElementById("bckgrnd_dropdown"),
	iconDropdown = document.getElementById("icon_dropdown"),
	AppyControls = webMI.hasRight(APPLY_CONTROLS);


// setup blank tables
console.log("Setting up empty tables...");
var commandsTable = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Table", { "gElement": document.getElementById("commands"),"sortedByColumn":0, "autoResize":true, "height":280, "width":600});
commandsTable.setConfiguration({rowHeight:RowHeight, sortingUp:false, drawStatusBar:false});
commandHeaders.push({name: "Parameter ", width: 180, fontSize: fontSize});
commandHeaders.push({name: "Unit", width: 60, fontSize: fontSize});
commandHeaders.push({name: "Value", width: 140, fontSize: fontSize});
commandHeaders.push({name: "Set", width: 35, fontSize: fontSize});
commandHeaders.push({name: "", width: 5,   fill:columnfill, fontSize: fontSize});
commandHeaders.push({name: "Value", width: 180, fontSize: fontSize});
commandsTable.setHeaders(commandHeaders);

var monitoringTable = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Table", { "gElement": document.getElementById("monitoring"),"sortedByColumn":0, "autoResize":true, "height":280, "width":315});
monitoringTable.setConfiguration({rowHeight:RowHeight,sortingUp:false, drawStatusBar:false});
monitoringHeaders.push({name: "Monitor", width: 130, fontSize: fontSize});
monitoringHeaders.push({name: "Value", width: 100, fontSize: fontSize});
monitoringHeaders.push({name: "Unit", width: 85, fontSize: fontSize});
monitoringTable.setHeaders(monitoringHeaders);


var selectedRemoteControl = 3;

var manualCommandsList;
var remoteCommandsList;
var monitorValuesList;
var nodeOfControlledComponent;

var controlModeDPRead;
var controlModeDPWrite;


getRowFunction = function(col, table){

	return function(dp) {

		var curData = table.dataProvider().source.data;
		for (var i=0; i<curData.length; i++) {	
			if(curData[i][col].dp == dp) {
				//console.log("Updating row ", i, " for dp ", dp);
				return i +1;
			}
		};
	}
}

// Microinteractions 

if (AppyControls){	
//	console.log("appl controls allowed");	
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {"fontSize":"16", "id":"dropdown_remote", "itemsCount":"0", "key1":"Qinous", "key2":"Modbus", "key3":"IEC", "key4":"", "key5":"", "minWidth":"90", "onEvent":"click", "outputNode":"", "trigger":"remoteSelection", "value1":"3", "value2":"4", "value3":"5", "value4":"", "value5":"", "x":"455", "y":"30"});
}else{
//	console.log("no control allowed");	
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open PopUp", {"PopUp":"00000016", "extern":"true", "height":"70", "id":"dropdown_remote", "menubar":"false", "modal":"true", "moveable":"true", "onEvent":"click", "passParameters":"true", "resizeable":"true", "scrollbars":"false", "status":"false", "title":" ERROR", "toolbar":"false", "width":"700"});
}

webMI.trigger.connect("SetMonitoringNode", function(e) {

	nodeOfControlledComponent	= e.value;

	commandsList				= getCommandsList(nodeOfControlledComponent.Type);
	monitorValuesList			= getMonitoringList(nodeOfControlledComponent.Type);

//	console.log("have some lists for the control view ", commandsList, monitorValuesList);
	UpdateTables(nodeOfControlledComponent);

	controlModeDPRead = activeControlPlaceDP(nodeOfControlledComponent);
	controlModeDPWrite = setControlPlaceDP(nodeOfControlledComponent);
//	console.log("have the read and write DPS ", controlModeDPRead, controlModeDPWrite);

// control place switching 
	webMI.data.subscribe(controlModeDPRead, function(e) {

		currentControlMode = parseInt(e.value);

//		console.log("Control place updated....", currentControlMode);
		webMI.trigger.fire("setToggleStatus", currentControlMode, "toogleSwitch");

		switch (currentControlMode) {
		  case CONTROL_BLOCKED: 
			controlBlockedActive ();
			break;
		  case CONTROL_GUI: //GUI
			controlGUIActive();
			break;
		  default:
			selectedRemoteControl = currentControlMode;
			controlExternalActive();
		}					
		UpdateTables(nodeOfControlledComponent);
	});	
	
	webMI.trigger.connect("RequestRemoteControl", function(e) {
//		console.log("Remote control requested, writing....");
		webMI.data.write(controlModeDPWrite,selectedRemoteControl);
	
	});
	
	webMI.trigger.connect("RequestGUIControl", function(e) {
//		console.log("GUI control requested, writing...");
		webMI.data.write(controlModeDPWrite,CONTROL_GUI);
	
	});
	
	
	webMI.trigger.connect("remoteSelection", function(e){
//		console.log("remote selected?");
		selectedRemoteControl = parseInt(e.value);
	
		if (currentControlMode != CONTROL_GUI) {
	
			webMI.data.write(controlModeDPWrite,selectedRemoteControl);
	
		}
		UpdateTables(nodeOfControlledComponent);
	
	});
});


//console.log("requesting the current node");
webMI.trigger.fire("MonitoringNodeRequest");

function initializeCommandsTable(manualRoot, remoteRoot, valueList, table){

// Security control
	var hasWriteAccess = webMI.hasRight(APPLY_CONTROLS);

//initialize table
	var nodearray = [];
	for (var i=0; i<valueList.length; i++) {	
//		//console.log("=====================================Looking at : ", valueList[i]);
		var datarow = [];
	
		datarow[0] = {text: valueList[i].ParamName, fill:linefill, fontSize: fontcolumn};
		datarow[1] = {text: valueList[i].Unit, fill:linefill, fontSize: fontcolumn};
		datarow[2] = {text: "...", fill:linefill, dp:manualRoot + valueList[i].DP};
		// to do add conditional to manage the array text of the array
		if (hasWriteAccess) {
			var eventList = [{name: "click", fn: getWriteFunction(manualRoot + valueList[i].DP, valueList[i].Type)}];
			datarow[3] = {text: "SET", fill:linefill, eventList: eventList};	
		} else {
			datarow[3] = {text: "", fill:linefill}; 
		}
		datarow[4] = {text: "", fill:columnfill, fontSize: fontcolumn};
		datarow[5] = {text: "...", fill:linefill, fontSize: fontcolumn, dp:remoteRoot + valueList[i].DP};
		nodearray[i] = datarow;	
	}
	table.setDataProvider({data: nodearray});

	//Set Update Function
	// Error try to debug error on the click down table update this for loop 1/2 sec
	for (var i=0; i<valueList.length; i++) {
		addSubscribe(3, getRowFunction(2, table), manualRoot + valueList[i].DP, valueList[i].Type, table);
		addSubscribe(6, getRowFunction(5, table), remoteRoot + valueList[i].DP, valueList[i].Type, table);
	}
}


function initializeMonitoringTable(monitoringRoot, valueList, table){

	//initialize table
	var nodearray = [];
	for (var i=0; i<valueList.length; i++) {	
//		//console.log("=====================================Looking at : ", valueList[i]);
		var datarow = [];
	
		datarow[0] = {text: valueList[i].ParamName, fill:linefill, fontSize: fontcolumn};
		datarow[1] = {text: "...", fill:linefill, fontSize: fontcolumn, dp:monitoringRoot + valueList[i].DP};
		datarow[2] = {text: valueList[i].Unit, fill:linefill, fontSize: fontcolumn};
		nodearray[i] = datarow;	
	}
	table.setDataProvider({data: nodearray});

	//Set Update Function
	for (var i=0; i<valueList.length; i++) {
		addSubscribe(2, getRowFunction(1, table), monitoringRoot + valueList[i].DP, valueList[i].Type, table);
	}
}

//initializeCommandsTable(manualRoot, remoteRoot, BCUCommands, commandsTable);
//initializeMonitoringTable(monitoringRoot, BCUMonitoringValues, monitoringTable);


function getControlsDP(node, place){

	var svi = "/"+node.TaskName+"/."+getComponentShortForm(node.Type)+"Control_";

	switch (place) {
		case CONTROL_BLOCKED:
			svi = svi+"Blocked";
			break;
		case CONTROL_GUI:
			svi = svi+"GUI";
			break;
		case CONTROL_QINOUS:
			svi = svi+"Qinous";
			break;
		case CONTROL_MODBUS:
			svi = svi+"Modbus";
			break;
		case CONTROL_IEC_104:
			svi = svi+"IEC60870";
			break;
	}

	svi = svi+"["+node.Index+"]";

	return svi;
}


function setControlPlaceDP(node){
	var svi = "/"+node.TaskName+"/." + getComponentShortForm(node.Type) + "_SetControlPlace[" + node.Index + "]";

	return svi;
}


function activeControlPlaceDP(node){
	return monitoringRoot+".ControlStatus.ControlPlace";
}

function UpdateTables(node){

	manualRoot = getControlsDP(node, CONTROL_GUI);
	remoteRoot = getControlsDP(node, selectedRemoteControl);
	monitoringRoot = node.DataDP;

//	console.log("main data for tables ", manualRoot, "===",remoteRoot,  "===",monitoringRoot,  "===",node);

	// update drop down box in tables
	switch (selectedRemoteControl) {
	  case CONTROL_QINOUS:
		textDropdown.textContent = "Qinous";
		break;
	  case CONTROL_MODBUS:
		textDropdown.textContent = "Modbus";
		break;
	  case CONTROL_IEC_104:
		textDropdown.textContent = "IEC";			
		break;
	  default:
		textDropdown.textContent = "Unknown ("+selectedRemoteControl+")";			
	
	}

	// clear tables first!
//	console.log("removing all rows");
	commandsTable.removeAllRows();
	monitoringTable.removeAllRows();
	//initialize table
//	console.log("filling tables");
	initializeCommandsTable(manualRoot, remoteRoot, commandsList, commandsTable);
	initializeMonitoringTable(monitoringRoot, monitorValuesList, monitoringTable);

}

function getComponentShortForm(type){

	switch (type){
	case TYPE_BATTERY:
		return "BCU";
	case TYPE_PV:
		return "PV";
	case TYPE_DIESEL:
		return "Diesel";
	case TYPE_SYSTEM:
		return "System";
	//TYPE_PV_GROUP = 101;
	//TYPE_CONSUMER_GROUP = 102;
	//TYPE_BATTERY_GROUP = 104;
	//TYPE_DIESEL_GROUP = 105;
	}
}

function controlBlockedActive (){
	boxManual.setAttribute("fill","#FAFAFA");
	boxRemote.setAttribute("fill","#FAFAFA");		
	titleManual.setAttribute("fill","#EBE8E5");
	remoteCommand.setAttribute("visibility","visible");
//	remoteCommand.setAttribute('style', "cursor: not-allowed;");		
	bckgrndDropdown.setAttribute("stroke","#EBE8E5");
	iconDropdown.setAttribute("fill","#EBE8E5");
	textDropdown.setAttribute("fill","#EBE8E5");
}

function controlGUIActive(){
	remoteCommand.setAttribute("visibility","visible");
	boxManual.setAttribute("fill","#4A5055");
	boxRemote.setAttribute("fill","#FAFAFA");		
	bckgrndDropdown.setAttribute("stroke","#E3E5E5");
	iconDropdown.setAttribute("fill","#E3E5E5");
	textDropdown.setAttribute("fill","#E3E5E5");

	titleManual.setAttribute("fill","#FFFFFF");
	bckgrndDropdown.setAttribute("stroke","#EBE8E5");
	iconDropdown.setAttribute("fill","#EBE8E5");
	textDropdown.setAttribute("fill","#EBE8E5");
}	

function controlExternalActive(){
	remoteCommand.setAttribute("visibility","visible");

	titleManual.setAttribute("fill","#E3E5E5");
	boxRemote.setAttribute("fill","#4A5055");		
	boxManual.setAttribute("fill","#FAFAFA");
	bckgrndDropdown.setAttribute("stroke","#FFFFFF");
	iconDropdown.setAttribute("fill","#FFFFFF");
	textDropdown.setAttribute("fill","#FFFFFF");

}



webMI.addEvent("icon_dropdown", ["mouseover","touchstart"], function(e){
	document.getElementById("icon_dropdown").setAttribute('style', "cursor: pointer;");		
});


// Fonts
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"commands", "key":"FontFamily", "property":""});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"monitoring", "key":"FontFamily", "property":""});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"monitoring", "key":"FontFamily", "property":""});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"performance", "key":"FontFamily", "property":""});

webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"title_manual", "key":"FontFamily", "property":""});

webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"txt_dropdown", "key":"FontFamily", "property":""});
},{"toogleSwitch":["1",{}]},{}],"1":[function(webMI,window,document,self){var factorX = 235,
	block = document.getElementById("not_allowed"),
	off = document.getElementById("click_off"),
	on = document.getElementById("click_on"),
	off_text = document.getElementById("text_on"),
	on_text = document.getElementById("text_off"),
	bck = document.getElementById("bckgrnd"),

	AppyControls = webMI.hasRight(APPLY_CONTROLS);


// Check Toogle Status

webMI.trigger.connect("setToggleStatus", function(e){	
	switch (e.value) {
	  case 1:
		setBlock()
		break;
	  case 2:
		setManual()
		break;
	  case 3:
		setRemote()
		break;
	  case 4:
		setRemote()
		break;
	  case 5:
		setRemote()
		break;

	  default:  unknown; 
	}	
});
	
// Events

webMI.addEvent("click_off", ["click","touchend"], function(e) {
	webMI.trigger.fire("RequestRemoteControl");
});

webMI.addEvent("click_on", ["click","touchend"], function(e) {
	webMI.trigger.fire("RequestGUIControl");
});

webMI.addEvent("click_off", ["mouseover","touchstart"], function(e){
	document.getElementById("click_off").setAttribute('style', "cursor: pointer;");		
});

webMI.addEvent("click_on", ["mouseover","touchstart"], function(e){
	document.getElementById("click_on").setAttribute('style', "cursor: pointer;");		
});


// Functions
function setBlock(){
	bck.setAttribute("visibility","visible");
	bck.setAttribute("fill","#DFDFDF");
	bck.setAttribute('style', "cursor: not-allowed;");		
	block.setAttribute("visibility","visible");
	block.setAttribute('style', "cursor: not-allowed;");		
	on.setAttribute("visibility","hidden");
	off_text.setAttribute("visibility","hidden");
	off.setAttribute("visibility","hidden");
	on_text.setAttribute("visibility","hidden");
}
function setRemote(){
	bck.setAttribute("visibility","visible");
	bck.setAttribute("fill","#BEC7D0");
	block.setAttribute("visibility","hidden");
	off.setAttribute("visibility","hidden");
	on_text.setAttribute("visibility","hidden");
	on.setAttribute("visibility","visible");
	off_text.setAttribute("visibility","visible");
}

function setManual(){
	bck.setAttribute("visibility","visible");
	bck.setAttribute("fill","#647a8f");
	block.setAttribute("visibility","hidden");
	on.setAttribute("visibility","hidden");
	off_text.setAttribute("visibility","hidden");
	off.setAttribute("visibility","visible");
	on_text.setAttribute("visibility","visible");
}

// Fonts
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"text_off", "key":"FontFamily", "property":""});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"text_on", "key":"FontFamily", "property":""});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"not_allowed", "key":"FontFamily", "property":""});
},{},{}]},window);]]></script>
</svg>
