<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svgmaker="http://www.svgmaker.com/svgns" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" xmlns:ns="http://web.resource.org/cc/" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atvise="http://www.atvise.com/" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="964" version="1.2" height="600" visibility="hidden" atv:oe="2BD6F3BAD3C6P2OEI9MCM759A8C5D35F769AICH4D9M1C1MBPDLCT45CB68GEDG87" xmlns="http://www.w3.org/2000/svg">
 <defs/>
 <metadata/>
 <polygon fill="#21246e" id="id_31" points="135,151 844,352 166,145 815,184 589,356 523,292 42,498 87,84 124,137 394,518 433,61 609,233 30,55 " stroke="#94fc17" stroke-width="5"/>
 <g>
  <svg width="85" x="0" y="30" visibility="hidden" height="30" id="bttn_taskmenu" atv:refpx="42.5" atv:refpy="50">
   <defs>
    <linearGradient id="1linear_0" y1="0" x1="0" y2="1" gradientUnits="objectBoundingBox" x2="1">
     <stop offset="0" stop-color="#ffffff"/>
     <stop offset="1" stop-color="#00c800"/>
    </linearGradient>
   </defs>
   <metadata/>
   <g atv:insensitive="true" id="bttn_taskmenu_bttn_taskmenu" atv:refpx="0" atv:refpy="0" transform="matrix(0.0664,0,0,0.0391,0,0)"/>
   <circle cx="355" cy="359" fill="#c1b960" id="id_25" r="111" stroke="#04de9f" stroke-width="2"/>
   <rect width="83" x="1" y="1" fill="none" rx="5" ry="3.684" height="28" stroke="#647A8F" stroke-linejoin="round" id="bttn_taskmenu_brdr_button" stroke-linecap="round" atv:refpx="42.572" stroke-width="1" atv:refpy="14.624"/>
   <text x="42.5" y="20" fill="#647a8f" font-family="Open Sans" text-anchor="middle" id="bttn_taskmenu_txt_taskname" atv:refpx="42.5" atv:refpy="16" font-size="12"></text>
   <line fill="#c789f8" id="id_26" stroke="#0ba59c" stroke-width="1" x1="518" x2="540" y1="272" y2="322"/>
  </svg>
 </g>
 <circle cx="859" cy="478" fill="#38715b" id="id_35" r="112" stroke="#ac46fe" stroke-width="2"/>
 <g>
  <svg width="250" x="10" y="90" height="510" id="nav_omponent" atv:refpx="139.991" atv:refpy="242.263">
   <defs/>
   <metadata/>
   <line fill="#a925f6" id="id_37" stroke="#168e2f" stroke-width="1" x1="766" x2="382" y1="94" y2="504"/>
   <g id="nav_omponent_tree" atv:refpx="125" atv:refpy="255.003" transform="matrix(0.8333,0,0,0.75,0,0)">
    <rect width="300" x="0" y="0" fill="#FFFFFF" height="680" stroke="none" id="nav_omponent_id_0" atv:refpx="150" stroke-width="0" atv:refpy="340"/>
    <rect fill="#372023" height="148" id="id_4" stroke="#76d5af" stroke-width="2" width="22" x="651" y="250"/>
   </g>
   <g>
    <svg width="250" x="1.023" y="0" height="40" id="nav_omponent_id_6" atv:refpx="151.023" atv:refpy="15">
     <defs/>
     <metadata/>
     <rect width="220" x="30" y="0" fill="#EEF1F2" display="none" height="40" stroke="none" id="nav_omponent_id_6_selectedIndicator" atv:refpx="140.001" stroke-width="0" atv:refpy="20"/>
     <text x="34.5" y="27.5" atv:bindtl="0,1" fill="#00ABE5" font-family="Varela Round" atv:bindbr="0,1" id="nav_omponent_id_6_id_0" atv:refpx="29.9" atv:refpy="24.139" font-size="16" transform="matrix(0.9836,0,0,1,0.492,0)">$title$</text>
     <polyline fill="#c8be13" id="id_16" points="387,391 941,420 716,255 263,564 9,345 333,249 131,421 186,527 521,382 399,373 16,172 274,474 166,37 327,288 " stroke="#44302e" stroke-width="5"/>
     <g id="nav_omponent_id_6_id_10" atv:refpx="nan" atv:refpy="nan" transform="matrix(1,0,0,1,0.6337,-10.2179)"/>
     <line fill="#619250" id="id_22" stroke="#b0a480" stroke-width="4" x1="104" x2="463" y1="191" y2="404"/>
     <polyline atv:bindtl="1,1" points="13.5,15.501 13.5,30.5 22.5,23.001 13.5,15.501" fill="#00ABE5" stroke="none" atv:bindbr="1,1" id="nav_omponent_id_6_collapsedIndicator" atv:refpx="18.001" stroke-width="0" atv:refpy="23.002"/>
     <polyline atv:bindtl="1,1" points="25.003,19 10.003,19 17.503,28 25.003,19" fill="#00ABE5" stroke="none" atv:bindbr="1,1" id="nav_omponent_id_6_expandedIndicator" atv:refpx="17.503" stroke-width="0" atv:refpy="23.503"/>
     <circle cx="335" cy="517" fill="#1d76e6" id="id_27" r="298" stroke="#21c2ee" stroke-width="1"/>
     <rect width="40" x="0" y="0" fill="#0000ff" height="40" stroke="none" fill-opacity="0" id="nav_omponent_id_6_expandClickarea" atv:refpx="20" stroke-width="0" atv:refpy="20"/>
     <rect fill="#b2746b" height="8" id="id_29" stroke="#110606" stroke-width="1" width="532" x="93" y="370"/>
    </svg>
   </g>
   <!--</svg>-->
</svg>
 </g>
 <polygon fill="#e400ac" id="id_17" points="831,434 417,76 466,121 889,447 566,495 345,180 697,30 809,158 856,259 " stroke="#1ae3c1" stroke-width="4"/>
 <g transform="matrix(0.8688,0,0,0.85,0,0)">
  <svg width="800" x="309.64" y="105.882" height="600" id="new_iframe" atv:refpx="617.5" atv:refpy="345">
   <defs/>
   <metadata/>
   <rect width="796" x="2" y="2" fill="none" height="596" stroke="#000000" id="new_iframe_stroke" atv:refpx="400" stroke-width="2" atv:refpy="299.999"/>
   <line fill="#659621" id="id_30" stroke="#9d0893" stroke-width="3" x1="824" x2="446" y1="444" y2="107"/>
   <circle cx="543" cy="254" fill="#b6b8a2" id="id_24" r="185" stroke="#bfed8c" stroke-width="5"/>
   <g id="new_iframe_iframegroup" atv:refpx="0" atv:refpy="0">
    <atv:foreignObject width="800" x="0" y="0" height="600" id="new_iframe_iframediv">
     <iframe allowTransparency="true" style="width:100%;height:100%" id="new_iframe_myframe" frameborder="0" scrolling="no" xmlns="http://www.w3.org/1999/xhtml">iframe</iframe>
    </atv:foreignObject>
   </g>
   <atv:foreignObject width="800" x="0" y="0" height="600" id="new_iframe_zoomareadiv">
    <div style="width:100%;height:100%;background-color:white;opacity:0;filter:alpha(opacity=0);" id="new_iframe_zoomarea" scrolling="no" xmlns="http://www.w3.org/1999/xhtml"/>
   </atv:foreignObject>
   <text x="309" y="319.5" fill="#000000" font-family="Verdana" id="new_iframe_label" atv:refpx="400" atv:refpy="300" font-size="48">IFRAME</text>
   <ellipse cx="322" cy="431" fill="#ee986f" id="id_32" rx="385" ry="2" stroke="#b57594" stroke-width="2"/>
   <atv:foreignObject width="0" x="0" y="0" height="0" id="new_iframe_zoomboxdiv">
    <div style="width: 100%; height:100%;" id="new_iframe_zoombox" xmlns="http://www.w3.org/1999/xhtml"/>
   </atv:foreignObject>
   <text x="175.5" y="389.11" fill="#000000" font-family="Verdana" id="new_iframe_label2" atv:refpx="400" atv:refpy="369.61" font-size="48">(display container)</text>
  </svg>
 </g>
 <atv:foreignObject width="120" x="0" y="570" height="25" id="id_1">
  <div style="width:100%;height:100%" xmlns="http://www.w3.org/1999/xhtml">
   <form action="">
    <input type="file" style="display:none" id="file_input"/>
   </form>
  </div>
 </atv:foreignObject>
 <circle cx="348" cy="100" fill="#44c9b9" id="id_34" r="167" stroke="#2eab5a" stroke-width="4"/>
 <g id="id_btn_Select" atv:refpx="840.75" atv:refpy="45.5" transform="matrix(1,0,0,1,-24,25)">
  <rect width="60" x="830.5" y="5.5" fill="none" rx="5" ry="5" height="30" stroke="#647a8f" id="id_5" atv:refpx="860" stroke-width="1" atv:refpy="20"/>
  <circle cx="403" cy="370" fill="#c69d15" id="id_28" r="76" stroke="#ca177b" stroke-width="2"/>
  <circle cx="524" cy="563" fill="#a01f60" id="id_11" r="152" stroke="#4b2223" stroke-width="1"/>
  <text x="839.5" y="24.5" fill="#647a8f" font-family="Bryant Regular" id="id_7" atv:refpx="863" atv:refpy="20" font-size="12">LOAD</text>
  <polyline fill="#49fbe3" id="id_3" points="660,535 393,70 743,57 126,82 848,153 686,571 " stroke="#757e28" stroke-width="1"/>
 </g>
 <g id="id_btn_Upload" atv:refpx="926.25" atv:refpy="45.5" transform="matrix(1,0,0,1,-19.5,25.5)">
  <rect width="60" x="905" y="5" fill="none" rx="5" ry="5" height="30" stroke="#647a8f" id="id_6" atv:refpx="935" stroke-width="1" atv:refpy="20"/>
  <circle cx="304" cy="375" fill="#d29853" id="id_36" r="50" stroke="#e67d5b" stroke-width="3"/>
  <text x="910" y="24" fill="#647a8f" font-family="Bryant Regular" id="id_8" atv:refpx="942" atv:refpy="19.5" font-size="12">UPLOAD</text>
  <polygon fill="#6aeb0a" id="id_23" points="554,65 338,522 659,379 268,61 446,383 566,23 619,508 597,97 571,30 954,267 819,463 279,334 184,114 " stroke="#a99bef" stroke-width="2"/>
 </g>
 <script xlink:href="../../webmi.js" type="text/ecmascript"/>
 <script xlink:href="/js/jquery.min.js" type="text/ecmascript"/>
 <script xlink:href="/q/StdConstantsFunctions.js" type="text/ecmascript"/>
 <script type="text/ecmascript"><![CDATA[webMI.proxy({"":[function(webMI,window,document,self){var $ = top.$;
var paramTree = [];
var paramSelection = [];
var selectedTask = '';


webMI.addOnload(function(f){
	paramTree = [];
	paramSelection = [];
	selectedTask = '';

	var parameterViewAllowed = webMI.hasRight(VIEW_PARAMETERS);

	if (parameterViewAllowed) {
		webMI.trigger.fire("RequestTaskList");	
		webMI.trigger.fire("RequestParameterTree");		
		webMI.display.openDisplay("00000006", webMI.query, "parameterTable");
	} else {
		alert("Hello! User do not have the proper rights to excute this functionality");
		webMI.display.openDisplay("00000002");
	
	}
});// END For

webMI.addEvent("id_btn_Select", ["mouseover","touchstart"], function(e){

	document.getElementById("id_btn_Select").setAttribute('style', "cursor: pointer;");		
});

webMI.addEvent("id_btn_Upload", ["mouseover","touchstart"], function(e){

	document.getElementById("id_btn_Upload").setAttribute('style', "cursor: pointer;");		
});


// - - - - - -  Upload process

webMI.addEvent("id_btn_Upload", "click", function(e) {
var id = "id_btn_Upload";
var value = true;
var input = document.getElementById("file_input");
var file = input.files[0];
var xmlhttp = new XMLHttpRequest();
xmlhttp.open("PUT" , "/" + input.files[0].name);
xmlhttp.setRequestHeader("Content-type", "application/octet-stream");
xmlhttp.send(file);
});

webMI.addEvent("id_btn_Select", "click", function(e) {
var id = "id_btn_Select";
var value = true;
return function(value) {
var input = document.getElementById("file_input");
if (input) {
input.click(); 
}
} (value);
});


// Task Menu Generation
webMI.trigger.connect("SetTaskList", function(e){

	var A = document.getElementById("bttn_taskmenu");
	var brdr_button = document.getElementById("bttn_taskmenu_brdr_button");
	//var txt_taskname = document.getElementById("bttn_taskmenu_txt_taskname");

	var Root = A.parentElement;
	var newA;
	
	var tsk_array = e.value; //["SAMVAC","QD_DSE","QM_HOMB","Q_SYS"];
//	console.log("Received task list "+tsk_array.length);

	for (var i = 0; i< tsk_array.length; i++)
	{
		// Move Factor
			var factorX = 20 + (100 * i);

		// Clone
			newA = A.cloneNode(true);
			newA.setAttribute("x",factorX);
			newA.id = "bttn_taskmenu"+i; 
			newA.setAttribute("visibility", "visible");
			Root.appendChild(newA);
		// Task name

			var txt_taskname = document.getElementById(newA.id).getElementsByTagName("text") ;

//			console.log("Creating button for "+tsk_array[i].task+", "+txt_taskname);
			txt_taskname[0].innerHTML = tsk_array[i].task;

			if (tsk_array[i].selected) {
				// todo highlight newA.setAttribute("visibility", "visible");
				selectedTask = tsk_array[i].task;	
			//	console.log("========== just set the selected task", selectedTask);						
			}
	
			newA.addEventListener("click", function(e) {
				selectTask(this.id);		
			});	

		//Highlight Menu			
			newA.addEventListener("mouseover", function(e) {
				document.getElementById(this.id).setAttribute('style', "cursor: pointer;");					
			});
	}// END For
	if (selectedTask == ''){
		selectedTask = tsk_array[0].task;
	}


}); 
// End task menu generation

function selectTask(setId){
	selectedTask = document.getElementById(setId).getElementsByTagName("text")[0].innerHTML;
	console.log("Task selected: "+setId+" Task Name: "+selectedTask);
	webMI.trigger.fire("SetConfigTask", selectedTask);
	// TODO: loop through all task buttons. select the one with setId as text, deselect the rest
}

webMI.trigger.connect("SetParameterTree", function(e){
	paramTree.length = 0;
	paramTree = e.value;
//	console.log("Received a complete parameter tree: "+paramTree);
// extract titles of all elements that have children, and pass to tree-navigation
	var paramSectionTree = getSections(paramTree);
	webMI.trigger.fire("SetParameterSectionTree", paramSectionTree);
});

webMI.trigger.connect("SetParamTreeSelection", function(e){
	paramSelection = e.value;
	webMI.display.openDisplay("00000006", webMI.query, "parameterTable");
});

webMI.trigger.connect("RequestParameterList", function(e){
//	console.log("Param list requested for "+paramSelection);
	webMI.trigger.fire("SetParameterList", getParameterList(paramSelection, paramTree));
});

function getParameterList(variables, nodeList, prefix){
	console.log("Extracting parameter list for selected ",selectedTask);
	if (prefix == undefined){
		prefix = '';
	}
	if (variables.length == 0) {
		return [];
	} else {
		for (var i=0; i<nodeList.length; i++){

			if (nodeList[i].variable === variables[variables.length-1]) {

				var new_prefix = variables.pop();

				if (nodeList[i].childs.length > 0) {
					var child_var = nodeList[i].childs[0].variable;
				
					if (child_var.slice(0, child_var.indexOf("[")) === nodeList[i].variable) {
						//console.log("That's an array group!");
						new_prefix = "";
					}
				}
				prefix = prefix + new_prefix;
				if (variables.length == 0) {
					console.log("============RETURNING PARAMLIST:", nodeList[i].dp_list, selectedTask, prefix);

					return [nodeList[i].dp_list, selectedTask, prefix];
				} else {
					return getParameterList(variables, nodeList[i].childs, prefix);
				}
			}			
		}
		return [];
	}
}

function getSections(nodeList){
	var sections = [];
	//console.log("Getting sections (just stripping out the dps)");
	for(var i=0; i<nodeList.length; i++){
		sections[i] = {title: nodeList[i].title, variable: nodeList[i].variable};
		//console.log("Stripped a seciotn out: "+sections[i].title);
		if (nodeList[i].childs !== undefined) {
			if (nodeList[i].childs.length > 0) {
				sections[i].childs = getSections(nodeList[i].childs);
			}
		}
	}
	return sections;
}


//Fonts
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"id_7", "key":"FontFamily", "property":""});
webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"id_8", "key":"FontFamily", "property":""});
},{"bttn_taskmenu":["1",{}],"nav_omponent":["2",{}],"new_iframe":["4",{"frameName":{v:"parameterTable"}}]},{}],"1":[function(webMI,window,document,self){webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"txt_taskname", "key":"FontFamily", "property":""});
},{},{"TaskName":""}],"2":[function(webMI,window,document,self){webMI.trigger.connect("SetParameterSectionTree", function(e){

	var proto = document.getElementById("tree").parentNode.id + "_" +"id_6";
	var paramTree = e.value;

	webMI.callExtension('SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Tree', {
		id: document.getElementById("tree").parentNode.id + "_" + "tree",
		prototypeItem: proto,
		indent: 10,
		source: paramTree,
		delegate: {
			bind: {
				// Bind the Valuebar
				/*"Server1/RES/Time_s": function(sourceItem, value) {
					console.error(value);
					webMI.gfx.setText(sourceItem.view.subview("id_6"), value);
				},*/
			},
	
			itemIsSelectable: function(sourceItem) {
				return true; //sourceItem.level > 0;
			},
	
			// Add a callback when items are selected
			itemSelected: function(sourceItem) {
				var variables = [];
				var item = sourceItem;
				var i = 0;
				while ((item) && (i< 5) && (typeof item !== 'undefined')){
//					console.log("look at item: "+item);
					variables.push(item.variable);
					item = item.parent;	
					i++;
				}
//				console.log("current selection is " + variables);
				webMI.trigger.fire("SetParamTreeSelection", variables);
				
			}
		}
	});

});

webMI.addOnload(function(e) {

//	webMI.trigger.fire("RequestParameterTree");

});
},{"id_6":["3",{}]},{}],"4":[function(webMI,window,document,self){var isNavigationFrame = webMI.query["isNavigationFrame"] == "true";
var url = webMI.query["url"];
var display = webMI.query["display"];
var targetUrl = url;
targetUrl = (targetUrl != undefined) ? targetUrl : webMI.display.createURL(display,{"base":webMI.query.base});
var frameName = webMI.query["frameName"];
var defaultFrameName = "";
var firstCCDExceeded = true;
var myFrame = document.getElementById("myframe");
var myLoadingscreen = null;
var myExcldFrame = null;
var urlPrefix = "";
var urlPostfix = "";
var currentActiveFrame = myFrame;
var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");

var mousedownpos1 = null;
var mousedownpos2 = null;
var mousedownpospan = null;
var olddisplaystyle = null;

var zoomAreaDiv = document.getElementById("zoomareadiv");
var zoomBoxDiv = document.getElementById("zoomboxdiv");
var zoomBoxParent = null;

var myIframe = document.getElementById(frameName);
var myIframeDiv = document.getElementById("iframediv");

var iframegroup = document.getElementById("iframegroup");

var zoomArea = document.getElementById("zoomarea");

var preloadGroup = document.getElementById("preload_group");

var preloaded = false;
var excludePreloaded = [];
var includePreloaded = [];
var preloadedFrames = {};
var runOnce = true;
var resumeCallbackObjects = [];

if (webMI.display.isVML())
	myFrame.style.position = "absolute";

function isInArray(arr,elem,replace){
	for (var iA=0;iA<arr.length;iA++){
		if ((typeof elem == "string") && (elem == arr[iA] || elem == urlPrefix+arr[iA]+urlPostfix)) {
			if (replace && elem != replace){ arr[iA] = replace;}
			return true;
		} else if ((typeof elem == "object") && arr[iA] == elem){
			return true;
		}
	}
	return false;
};
function createLoadingScreen(loadingscreen){
	myLoadingscreen = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "div");
	myLoadingscreen.style.fontFamily = "Arial";
	myLoadingscreen.style.overflow = "hidden";
	myLoadingscreen.style.position = "absolute";
	myLoadingscreen.style.left = "0";
	myLoadingscreen.style.top = "0";
	myLoadingscreen.style.height = "100%";
	myLoadingscreen.style.width = "100%";
	myLoadingscreen.style.zIndex = "999";
	myLoadingscreen.style.backgroundColor = "#CCCCCC";
	myLoadingscreen.style.cursor = "wait";
	loadingscreen.parentNode.appendChild(myLoadingscreen);
};
function setLoadingScreenMessage(urlString,c1,c2){
	var msg = "Loading "+urlString.substring(urlString.lastIndexOf('/')+1)+" ("+c1+"/"+c2+")";
	myLoadingscreen.innerHTML = "<div style='position:absolute;top:300px;width:100%;text-align:center'>"+msg+"</div>";
};
function createIFrame(url){
	var frame = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "iframe");
	frame.frameBorder = "0";
	frame.scrolling = "no";
	frame.style.width = "100%";
	frame.style.height = "100%";
	if (url) frame.src = url;
	return frame;
};
function attachLoadEvent(frame, additional, callback){
	if (!tabHandler.hasIFrameEvent(frame)){
		webMI.addEvent(frame, "load", function(e) {
			if (additional!=null) additional();
			addOnLoadFrame(frame);
			addOnLoadAllFrame(frame,callback);
		});
		tabHandler.setIFrameHasEvent(frame);
	}
};
function addOnLoadFrame(frame){
	tabHandler.setIFrameLoaded(frame,true);
	tabHandler.registerDisplay(frame.contentWindow.document);
	var contentWin;
	if ((contentWin = frame.contentWindow) && contentWin.webMI){
		contentWin.webMI.addOnfocus(function(){
			if (contentWin != null)
				tabHandler.getFocused(contentWin.document);
		});
		contentWin.webMI.addOnunload(function(){
			try {contentWin} catch(err){return;}
			if (contentWin != null){
				tabHandler.removeDoc(contentWin.document);
			}
		});
	}
	var element = frame.contentDocument ? frame.contentDocument : contentWin.document;
	webMI.addEvent(element, ["click","keypress","touchstart"], function(e) {
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.AutoLogout", {"action":"restartTimer"});
	});
	webMI.addEvent(element, "touchstart", function(e) {
		webMI.display.showPopup(0, 0, null);
	});
	consistencyHandler.read();
};
function addOnLoadAllFrame(frame,callback){
	if (!tabHandler.areAllIFrameLoaded()) {if (frame && frameName==defaultFrameName){tabHandler.addAfterIFrameLoad(callback);} return;};
	tabHandler.beforeFirstUse(frame.contentWindow.document,false,callback);
	tabHandler.runAfterIFrameLoad();
};

webMI.addOnload(function() {
	zoomAreaDiv.style.display = "none";
	if (isNavigationFrame) {
		if (zoomAreaDiv != null && zoomBoxDiv != null) {
			zoomBoxParent = zoomBoxDiv.parentNode;
			zoomAreaDiv.style.zIndex = "100";
			zoomBoxDiv.style.zIndex = "100";
			zoomBoxDiv.style.display = "none";
			zoomBoxDiv.style.border = "1px solid black";
			zoomAreaDiv.style.cursor = "crosshair";
			webMI.addEvent(zoomArea, "mousedown", zoomMouseDown);
			webMI.addEvent(zoomArea, "mousemove", zoomMouseMove);
			webMI.addEvent(zoomArea, "mouseup", zoomMouseUp);
			webMI.addEvent(zoomBoxDiv, "mousedown", zoomMouseDown);
			webMI.addEvent(zoomBoxDiv, "mousemove", zoomMouseMove);
			webMI.addEvent(zoomBoxDiv, "mouseup", zoomMouseUp);
		}

		webMI.keys.addDownListener(function() {
			if (!mousedownpos1 && !olddisplaystyle) {
				mousedownpospan = null;
				olddisplaystyle = "block";
				zoomAreaDiv.style.display = "block";
				zoomAreaDiv.style.cursor = "move";
			}
		}, 18);

		webMI.keys.addUpListener(function() {
			if (olddisplaystyle) {
				zoomAreaDiv.style.cursor = "crosshair";
				zoomAreaDiv.style.display = "none";
				olddisplaystyle = null;
			}
		}, 18);

		webMI.addOnfocus(function(e) {
			mousedownpos1 = null;
			mousedownpos2 = null;
			updateZoomBox();
			zoomAreaDiv.style.display = "none";
		});

		addNavigationTriggers();
	}
	webMI.gfx.setVisible("stroke", false);
	webMI.gfx.setVisible("label", false);
	webMI.gfx.setVisible("label2", false);

	webMI.trigger.fire("com.atvise.display_structure", function(e, preload, excludePreload, includePreload, loadingscreen, firstConnect) {
		if (e != null) {
			var displayConfig = e;
			urlPrefix = "/"+displayConfig["prefix"];
			urlPostfix = displayConfig["postfix"];
			preloaded = preload;

			if (preloaded) {
				webMI.trigger.connect("register.preload.resume", function(e) {
					resumeCallbackObjects.push(e.value);
				});
			}

			excludePreloaded = excludePreload;
			includePreloaded = includePreload;
			var defaultPage = (firstConnect.defaultUrl == "")?webMI.display.createURL(displayConfig["default"]):firstConnect.defaultUrl;
			var firstFire = firstConnect.value && (webMI.query.isDefault == "true");
			if (firstFire) {
				firstConnect.value = false;
				firstConnect.defaultFrameName = frameName;
				defaultFrameName = frameName;
				webMI.display.setOpenUrlHandler(function(url,frame) {
					frame = (typeof frame != "string" || frame==null)?firstConnect.defaultFrameName:frame;
					function changeDisplay(){
						var iframe = tabHandler.getIFrame(frame);
						if (iframe == null) iframe = tabHandler.getIFrame(firstConnect.defaultFrameName);
						if (iframe != null){
							if (frame != firstConnect.defaultFrameName){
								changeFrame_(url,iframe)
							} else {
								(iframe!=null) && changeFrame(url,iframe);
							}
						}
					}
					if (tabHandler.areAllIFrameLoaded()){
						changeDisplay();
					} else {
						tabHandler.addAfterIFrameLoad(changeDisplay);
					}
				});
				webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
					if ("CCDexceeded" in e && e["CCDexceeded"]){
						if (firstCCDExceeded){
							alert("CCD exceeded!");
							firstCCDExceeded = false;
						} else console.warn("CCD exceeded!");
					}
				});
			}
			if (firstFire && (preload || (!preload && includePreloaded.length > 0))) {
				var displays = [];
				var urls = [];
				var ucount1 = 0, ucount2 = 0;
				function allLoadedCallback(frame){
					if (runOnce){
						runOnce = false;
						changeFrame(targetUrl);
						loadingscreen.parentNode.removeChild(myLoadingscreen);
					} else {
						frame && frameName == firstConnect.defaultFrameName && tabHandler.getFocused(frame.contentWindow.document);
					}
				}
				function extractMenu(menu,prefix,allSub) {
					var NORMAL = 0; var ALL_BELOW = 1; var NONE_BELOW = 2;
					allSub = allSub||NORMAL;
					for (var i in menu) {
						var menuItem = menu[i];
						var menuItemName = (menuItem.identifier)?menuItem.identifier:prefix+"."+menuItem.name;
						if (menuItem.sub) {
							if (allSub == ALL_BELOW || isInArray(includePreloaded,menuItemName)){
								extractMenu(menuItem.sub,menuItemName,ALL_BELOW);
							} else if (allSub == NONE_BELOW || isInArray(excludePreloaded,menuItemName)){
								extractMenu(menuItem.sub,menuItemName,NONE_BELOW);
							} else {
								extractMenu(menuItem.sub,menuItemName,allSub);
							}
						}
						if (menuItem.display && allSub == ALL_BELOW){
							includePreloaded[includePreloaded.length] = menuItem.display;
							displays.push(menuItem.display);
						} else if (menuItem.url && allSub == ALL_BELOW){
							includePreloaded[includePreloaded.length] = menuItem.url;
							urls.push(menuItem.url);
						} else if (menuItem.display && allSub == NONE_BELOW){
							excludePreloaded[excludePreloaded.length] = menuItem.display;
						} else if (menuItem.url && allSub == NONE_BELOW){
							excludePreloaded[excludePreloaded.length] = menuItem.url;
						} else if (menuItem.display && preload && (excludePreloaded.length == 0 || !isInArray(excludePreloaded,menuItemName,menuItem.display))) {
							displays.push(menuItem.display);
						} else if (menuItem.display && !preload && isInArray(includePreloaded,menuItemName,menuItem.display)) {
							displays.push(menuItem.display);
						} else if (menuItem.url  && (excludePreloaded.length == 0 || !isInArray(excludePreloaded,menuItem.url))) {
							urls.push(menuItem.url);
						} else if (menuItem.url  && !preload && isInArray(includePreloaded,menuItem.url)) {
							urls.push(menuItem.url);
						}
					}
				};
				function addFrame(frameArray, isDisplay) {
					var url = frameArray.pop();
					if (url != undefined) {
						url = isDisplay ? webMI.display.createURL(url) : url;
						if (url == targetUrl || url == defaultPage) {
							addFrame(frameArray, isDisplay);
						} else {
							var preloadedFrame = createIFrame(url);
							preloadedFrames[url] = preloadedFrame;
							tabHandler.pushIFrame("",preloadedFrame);
							setLoadingScreenMessage(url,++ucount1,ucount2);
							attachLoadEvent(preloadedFrame, 
								function(){	
									addFrame(frameArray, isDisplay);
									preloadedFrame.contentWindow.webMI && preloadedFrame.contentWindow.webMI.data.pause();}, 
								allLoadedCallback);
							webMI.gfx.addForeignObject({x:0, y:0, width:800, height:600, childNodes: [preloadedFrame]}, iframegroup);
						}
					}
				};
				extractMenu(displayConfig.menu,"AGENT.DISPLAYS");
				ucount2 = displays.length+urls.length;
				if (includePreloaded.length == 0 && ucount2>0) ucount2--;
				else ucount2++
				createLoadingScreen(loadingscreen);
				preloadedFrames[targetUrl] = myFrame;
				tabHandler.pushIFrame(frameName,myFrame);
				setLoadingScreenMessage(targetUrl,++ucount1,ucount2)
				if (displays != undefined) {
					addFrame(displays, true);
				}
				if (urls != undefined) {
					addFrame(urls, false);
				}
				attachLoadEvent(myFrame,null,function(){allLoadedCallback(myFrame)});
				myFrame.src = targetUrl;				
				myExcldFrame = createIFrame();
				preloadedFrames["exclude"] = myExcldFrame;
				tabHandler.pushIFrame("",myExcldFrame);
				tabHandler.setIFrameLoaded(myExcldFrame,true);
				(webMI.gfx.addForeignObject({x:0, y:0, width:800, height:600, childNodes: [myExcldFrame]}, iframegroup)).style.display = "none";
			} else {
				tabHandler.pushIFrame(frameName,myFrame);
				changeFrame_(targetUrl,myFrame);
			}
		}
	});
});

/**
 * calculate offset for zooming in nested iframes
 */
function getOffset(element, position) {
	position.x -= element.offsetLeft;
	position.y -= element.offsetTop;

	if (element.id == "foreignobjects")
		return position;

	return getOffset(element.parentNode, position);
}

function zoomMouseDown(e) {
	if(!e)
		e = window.event;

	if (e.preventDefault)
		e.preventDefault();

	if (olddisplaystyle != null) {
		var webMImyIframe = currentActiveFrame.contentWindow.webMI;
		var viewBox = webMImyIframe.display.getViewBox();
		var offset = getOffset(zoomBoxParent, {x: e.clientX, y: e.clientY});
		mousedownpospan = {x: offset.x, y: offset.y, viewBoxX: viewBox[0], viewBoxY: viewBox[1]};
		zoomAreaDiv.style.cursor = "move";
	} else {
		if (!mousedownpos1)
			mousedownpos1 = getOffset(zoomBoxParent, {x: e.clientX, y: e.clientY});
		else
			mousedownpos2 = getOffset(zoomBoxParent, {x: e.clientX, y: e.clientY});

		updateZoomBox();
	}
}

function zoomMouseMove(e) {
	if(!e)
		e = window.event;

	if (mousedownpospan) {
		var webMImyIframe = currentActiveFrame.contentWindow.webMI;
		var viewBox = webMImyIframe.display.getViewBox();
		var offset = getOffset(zoomBoxParent, {x: e.clientX, y: e.clientY});
		var viewBoxX = mousedownpospan.viewBoxX + viewBox[2] * (mousedownpospan.x - offset.x) / parseFloat(myIframeDiv.style.width);
		var viewBoxY = mousedownpospan.viewBoxY + viewBox[3] * (mousedownpospan.y - offset.y) / parseFloat(myIframeDiv.style.height);
		webMImyIframe.display.setViewBox(viewBoxX, viewBoxY, viewBox[2], viewBox[3]);
	} else {
		mousedownpos2 = getOffset(zoomBoxParent, {x: e.clientX, y: e.clientY});
		updateZoomBox();
	}
}

function updateZoomBox() {
	if(mousedownpos1 != null && mousedownpos2 != null) {
		var w = Math.abs(mousedownpos1.x - mousedownpos2.x);
		var h = Math.abs(mousedownpos1.y - mousedownpos2.y);

		if (w > 1) --w;
		if (h > 1) --h;

		zoomBoxDiv.style.display = "block";
		zoomBoxDiv.style.top = (mousedownpos1.y < mousedownpos2.y ? mousedownpos1.y : mousedownpos2.y) + "px";
		zoomBoxDiv.style.left = (mousedownpos1.x < mousedownpos2.x ? mousedownpos1.x : mousedownpos2.x) + "px";
		zoomBoxDiv.style.height = h + "px";
		zoomBoxDiv.style.width = w + "px";
	} else
		zoomBoxDiv.style.display = "none";
}

function zoomMouseUp(e) {
	if(!e)
		e = window.event;

	if (mousedownpospan) {
		mousedownpospan = null;
		zoomAreaDiv.style.cursor = "move";
	} else if (mousedownpos1 && mousedownpos2 && mousedownpos1.x != mousedownpos2.x && mousedownpos1.y != mousedownpos2.y) {
		var mainArea = {
			x: myIframeDiv.offsetLeft,
			y: myIframeDiv.offsetTop,
			w: parseFloat(myIframeDiv.style.width),
			h: parseFloat(myIframeDiv.style.height)
		};
		var h = parseFloat(zoomBoxDiv.style.height) / mainArea.h;
		var w = parseFloat(zoomBoxDiv.style.width) / mainArea.w;
		var x = (parseFloat(zoomBoxDiv.style.left) - mainArea.x) / mainArea.w;
		var y = (parseFloat(zoomBoxDiv.style.top) - mainArea.y) / mainArea.h;

		var webMImyIframe = currentActiveFrame.contentWindow.webMI;
		var viewBox = webMImyIframe.display.getViewBox();
		viewBox[0] = x * viewBox[2] + viewBox[0];
		viewBox[1] = y * viewBox[3] + viewBox[1];
		viewBox[3] = h * viewBox[3];
		viewBox[2] = w * viewBox[2];
		webMImyIframe.display.setViewBox(viewBox[0], viewBox[1], viewBox[2], viewBox[3]);

		mousedownpos1 = null;
		mousedownpos2 = null;
		updateZoomBox();
		zoomAreaDiv.style.display = "none";
	}
}

function changeFrame_(url,frame){
	firstCCDExceeded = true;
	consistencyHandler.renew();
	tabHandler.changeDisplay();
	frame.style.display = "";

	var cf = function() {
		frame.src = url;
		attachLoadEvent(frame, null, function(){tabHandler.getFocused(frame.contentWindow.document)});
	};

	//Fix Opera timeout problem
	if (navigator.userAgent.indexOf("Opera") > -1) {
		setTimeout(function(){
			frame.src = null;
			cf();
		}, 1);
	} else {
		cf();
	}
}

function changeFrame(url, frame) {
	var pureUrl = (url.indexOf("?")>-1)?url.substring(0,url.indexOf("?")):url;
	for (var i in preloadedFrames) {
			preloadedFrames[i].contentWindow.webMI && preloadedFrames[i].contentWindow.webMI.data.pause();
			preloadedFrames[i].parentNode.style.display = "none";
	}
	if (!preloaded && includePreloaded.length == 0 ) {
		myFrame.parentNode.style.display = "";
		changeFrame_(url, frame||myFrame);
	} else if ( (!preloaded && !isInArray(includePreloaded,pureUrl)) || (preloaded && isInArray(excludePreloaded,pureUrl)) ) {
		myExcldFrame.parentNode.style.display = "";
		currentActiveFrame = myExcldFrame;
		myIframeDiv = myExcldFrame.parentNode;
		changeFrame_(url, myExcldFrame);
	} else {
		var find = false;
		tabHandler.blurFocused();
		for (var i in preloadedFrames) {
			if (i == url || i == url.substring(0,url.indexOf("?")) ) {
				find = true;
				firstCCDExceeded = true;
				preloadedFrames[i].parentNode.style.display = "";
				var contentDocument = preloadedFrames[i].contentWindow.document;
				for (var j = 0; j < resumeCallbackObjects.length; ++j) {
					if (contentDocument == resumeCallbackObjects[j].document)
						resumeCallbackObjects[j].callback();
				}
				preloadedFrames[i].contentWindow.webMI && preloadedFrames[i].contentWindow.webMI.data.resume();
				currentActiveFrame = preloadedFrames[i];
				myIframeDiv = preloadedFrames[i].parentNode;
				tabHandler.getFocused(preloadedFrames[i].contentWindow.document);
			}
		}
		if (!find){ // alarmlist, historylist
			if (myExcldFrame == null ) myExcldFrame = frame||myFrame;
			myExcldFrame.parentNode.style.display = "";
			currentActiveFrame = myExcldFrame;
			myIframeDiv = myExcldFrame.parentNode;
			changeFrame_(url, myExcldFrame);
		}
	}
}

webMI.trigger.connect("getSource_" + frameName, function(e) {
	var src = currentActiveFrame.src;
	if (currentActiveFrame.src.indexOf("/") > -1) {
		var parts = currentActiveFrame.src.split("/");
		src = parts[parts.length-1];
	}
	if (src.indexOf("?") > -1) {
		src = src.substring(0, src.indexOf("?"));
	}
	e.value(src, currentActiveFrame.contentWindow.webMI);
});

function addNavigationTriggers() {
	webMI.trigger.connect("changeDisplay_" + frameName, function(e) {
		var url = e.value;
		var query;

		if (typeof e.value == "object") {
			url = e.value.url;
			query = e.value.query;
		} else {
			var indexOfQuestionMark = url.indexOf("?", 1);
			if (indexOfQuestionMark > 0) {
				query = url.substring(indexOfQuestionMark + 1);
				url = url.substring(0, indexOfQuestionMark);
			}
		}

		if (url != undefined)
			webMI.display.openUrl(webMI.display.createURL(url), query, frameName);
	});
	// 0...x, 1...y, 2...w, 3...h
	var zoomFactor = 0.1;
	webMI.trigger.connect("com.atvise.zoomIn_" + frameName, function(e) {
		var webMImyIframe = currentActiveFrame.contentWindow.webMI;
		var viewBox = webMImyIframe.display.getViewBox();
		viewBox[3] /= 1+zoomFactor;
		viewBox[2] /= 1+zoomFactor;
		viewBox[0] += viewBox[2] * zoomFactor / 2;
		viewBox[1] += viewBox[3] * zoomFactor / 2;
		webMImyIframe.display.setViewBox(viewBox[0], viewBox[1], viewBox[2], viewBox[3]);
	});
	webMI.trigger.connect("com.atvise.zoomOut_" + frameName, function(e) {
		var webMImyIframe = currentActiveFrame.contentWindow.webMI;
		var viewBox = webMImyIframe.display.getViewBox();
		viewBox[0] -= viewBox[2] * zoomFactor / 2;
		viewBox[1] -= viewBox[3] * zoomFactor / 2;
		viewBox[3] *= 1+zoomFactor;
		viewBox[2] *= 1+zoomFactor;
		webMImyIframe.display.setViewBox(viewBox[0], viewBox[1], viewBox[2], viewBox[3]);
	});
	webMI.trigger.connect("com.atvise.zoom11_" + frameName, function(e) {
		var webMImyIframe = currentActiveFrame.contentWindow.webMI;
		var viewBox = webMImyIframe.display.getInitialViewBox();
		webMImyIframe.display.setViewBox(viewBox[0], viewBox[1], viewBox[2], viewBox[3]);
	});
	webMI.trigger.connect("com.atvise.zoomRect_" + frameName, function(e) {
		mousedownpospan = null;
		zoomAreaDiv.style.display = "block";
	});
	webMI.trigger.connect("com.atvise.getDefaultDisplay_" + frameName, function(e) {
		e.value(display,url);
	});
}

//workaround for [AT-D-3223]

if (navigator.userAgent.indexOf("Firefox") != -1) {
	if (webMI.display.getURLPrefix() == "") {
		console.warn("Reloading because of empty URL prefix - Firefox Bug 301325");
		window.window.location.reload();
	}
}
},{},{"frameName":"myframe","isDefault":"true","isNavigationFrame":"false"}],"3":[function(webMI,window,document,self){webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Theme", {"action":"font family", "defaultValue":"font family", "id":"id_0", "key":"FontFamily", "property":""});
},{},{}]},window);]]></script>
</svg>
